{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"fdaf14ec1b1d43619c2df0ba1fc685d47131545d","modified":1711281320719},{"_id":"source/_posts/.DS_Store","hash":"1027f06a5428b8c12690be06ec9e114cfaa345bd","modified":1711287500167},{"_id":"source/_posts/Fragment-of-my-Fantasy.md","hash":"f5f472ab6b5d1a546f40dfc8745599c7aab8c8f1","modified":1711286293549},{"_id":"source/about/index.md","hash":"f21ac8253c3142a896b82de3be021c4e1643d5b1","modified":1711285942480},{"_id":"source/_posts/Reminder.md","hash":"b3afb6eff5d29abe08614b08eee792e6f56d504f","modified":1711281454039},{"_id":"source/_posts/Tacos-lab1-directions.md","hash":"a8fa4b23aa0d4391316f6bbb0b56f0e40fd6e92b","modified":1711285781466},{"_id":"source/_posts/Pushdown-Automata-and-Context-free-Grammar.md","hash":"c1d38ab1ee2f40e971ab9c7b2b394e03dfc2111d","modified":1711285698484},{"_id":"source/_posts/Tacos-lab1-directions/image-20240324194932498.png","hash":"9132488a852b1a92d90d4cfffa19f5a3a00fd31b","modified":1711280972499},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710425394849},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710425394852},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710425394854},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710425394858},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710425394856},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710425394807},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710425394825},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710425394835},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710425394842},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710425394846},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"18b3b80cf6456697a675721d957362840c1ab949","modified":1710425394875},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1710425394859},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1710425394888},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1710425394888},{"_id":"node_modules/hexo-theme-icarus/.DS_Store","hash":"f09a86bb4ce7d04901ec1bb4cb55bee99909840c","modified":1710426430745},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1710425394884},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1710425394881},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1710425394881},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1710425394884},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1710425394885},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"93a79969c7eb47cfac097893cda36368db56902c","modified":1710425394864},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1710425394885},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"daf8eca64197709a9dc4a4792c403a32d78bdfae","modified":1710425394880},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"4b8a3096137e0d879fb17972a69630bde38d8212","modified":1710425394862},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"040fed1d0d7e4d8003446d1541bc15a2c4b4e500","modified":1710425394866},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"e02471f80db87db43aa7d527176e195b60dc4b99","modified":1710425394863},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1710425394887},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1710425394887},{"_id":"node_modules/hexo-theme-icarus/source/.DS_Store","hash":"7b794f868eb054e5aaea6a481b7092a6b11d81d4","modified":1710426464048},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1710425394899},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1710425394898},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1710425394897},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1710425394898},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1710425394899},{"_id":"node_modules/hexo-theme-icarus/languages/it.yml","hash":"b76999994cda6b08b53d34c3dd67947f164de655","modified":1710425394899},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"b992b68705f5050a99de926525b3cb40d95c4769","modified":1710425394898},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1710425394899},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1710425394900},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1710425394899},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1710425394900},{"_id":"node_modules/hexo-theme-icarus/languages/sv.yml","hash":"b12eee168c52aac855ffce9f78fe5fd5d6e3970c","modified":1710425394900},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1710425394901},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1710425394901},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1710425394903},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1710425394901},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1710425394901},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"fd52330d582fd122db7f55444c2f3368ff4bd8d7","modified":1710425394882},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"de966666f1e4ef80e0d15081b2709c3065b246dd","modified":1710425394882},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"0610cadb3976954c6f299d30320a93a1bd2a151c","modified":1710425394882},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"c4fc3c016de42c50614f70538a23359eee905ed3","modified":1710425394880},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"2e27800b2a8a87112c96778db858c3419d890b79","modified":1710425394885},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"0fad6f8a91bb5cf678b9ff2d66d2162d61625074","modified":1710425394887},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"1409627d98a92b4f5b2ab829f8e6b50b75d60e53","modified":1710425394886},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"eaec7c7b936197247e5acd73a79ca951da4d82ec","modified":1710425394886},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":1710425394884},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"7a89ac72a988d13b4714ab78a6dfd5cd8de85d47","modified":1710425394887},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"ff049c2837a111da775d1661b605dd417614b84c","modified":1710425394883},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1710425394863},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"7189efe33d18927d3790e8afb06642fb293b8603","modified":1710425394864},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1710425394881},{"_id":"node_modules/hexo-theme-icarus/include/migration/v5_v5.1.js","hash":"073f22bd16e34b56f016633b1676dab2e7d8843d","modified":1710425394867},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1710425394879},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1710425394886},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"f233678cd656c0e300181ca79dd30cb42fc213b3","modified":1710425394872},{"_id":"node_modules/hexo-theme-icarus/include/migration/v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":1710425394867},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"a46da71c20fa9d73c1bac26fda77717abae1b308","modified":1710425394866},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1710425394890},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"ec54dc24eb4d9802d8fefc44c210558bc1641109","modified":1710425394891},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1710425394891},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1710425394891},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1710425394866},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1710425394891},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1710425394893},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1710425394893},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1710425394894},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1710425394893},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":1710425394894},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"084843d5a522029e0f84a4fe791fbcb2cabd4c36","modified":1710425394894},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1710425394895},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1710425394894},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1710425394895},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1710425394896},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1710425394895},{"_id":"node_modules/hexo-theme-icarus/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1710426481795},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1710425394897},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1710425394896},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1710425394895},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1710425394890},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1710425394892},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1710425394893},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1710425394897},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1710425394860},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1710425394870},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"f49270b619f5d2c3decde6b0b5a0c3bbab4b54a5","modified":1710425394871},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1710425394872},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"e85c9d7f2579805beb252a1b6345d5a668a13baa","modified":1710425394872},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1710425394873},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1710425394874},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1710425394876},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1710425394861},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1710425394877},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1710425394877},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1710425394877},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1710425394877},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1710425394878},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1710425394871},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1710425394876},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1710425394868},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1710425394861},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"37f3b16fbd9668b9496d5f2d9bd9fb22fc6cee27","modified":1710425394865},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1711292726022},{"_id":"source/_posts/Tacos-lab1-directions/image-20240324210533293.png","hash":"0e72d6a522f8c89dab5d78ed1efe8a73bdfd3b11","modified":1711285533293},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1711291370607},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1711291370607},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1711291370607},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1711291370607},{"_id":"public/content.json","hash":"4055379fba6d684f336322e40559e6d05046261a","modified":1711291370607},{"_id":"public/manifest.json","hash":"b7268d9e74e5d21ac36418d738d34291d4efaf4b","modified":1711291370607},{"_id":"public/about/index.html","hash":"eaa4cbe040c73c2b4a976a6036208ebd54e4c99f","modified":1711291370607},{"_id":"public/2024/03/24/Fragment-of-my-Fantasy/index.html","hash":"d7659bb5e7ae9984b376b23662c604943633a919","modified":1711291370607},{"_id":"public/2024/03/18/Tacos-lab1-directions/index.html","hash":"248c94bb3ae2e878be0a7f2b28796552d1a6673e","modified":1711291370607},{"_id":"public/2024/03/15/Pushdown-Automata-and-Context-free-Grammar/index.html","hash":"7cea048e3880ecb655b3338251ae52c629bc0d32","modified":1711291370607},{"_id":"public/2024/03/14/Reminder/index.html","hash":"29379436e126e1825ecbffbd1729114d8e24f4e2","modified":1711291370607},{"_id":"public/categories/Theoretical-Computer-Science-TCS/index.html","hash":"40b43a3cc7c1c965ae831a4587e2f73a110279b3","modified":1711291370607},{"_id":"public/categories/Configuration/index.html","hash":"5fc649b965e85add4d5b7a84131c7ea36dde665f","modified":1711291370607},{"_id":"public/categories/Theoretical-Computer-Science-TCS/Automata/index.html","hash":"c03ed1b06844031775d3185c5f9cfaccc040199c","modified":1711291370607},{"_id":"public/categories/Operating-System/index.html","hash":"7ded330d15218684679f3c0815d33e45c6bdcaa5","modified":1711291370607},{"_id":"public/archives/index.html","hash":"b3625a9c92f843c421e31f2b57841f59e9480352","modified":1711291370607},{"_id":"public/archives/2024/index.html","hash":"c61d60007198daa80e75809dfd7f7a16b7c84a2f","modified":1711291370607},{"_id":"public/archives/2024/03/index.html","hash":"de0fcd103aaca57c08adb487243ab5e0c630ecbd","modified":1711291370607},{"_id":"public/index.html","hash":"3445bc6733fe237cac2e508b894bce675e3ee3ec","modified":1711291370607},{"_id":"public/tags/Automata/index.html","hash":"a61d8ffc2d9a315557bf01fdbafad683ed80e045","modified":1711291370607},{"_id":"public/tags/Theoretical-Computer-Science-TCS/index.html","hash":"716a9073bc6f6879a370760f17a3e974b7b68334","modified":1711291370607},{"_id":"public/tags/Operating-System/index.html","hash":"4bdee4bd1d57d9dd5988e601b63bade67d0dd2f6","modified":1711291370607},{"_id":"public/categories/index.html","hash":"43282e1aecdabc29bd9b6e48bee86cd74ebe950b","modified":1711291370607},{"_id":"public/tags/index.html","hash":"773c98a1c2cb2007caa201f23712d5a6241efced","modified":1711291370607},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1711291370607},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1711291370607},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1711291370607},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1711291370607},{"_id":"public/2024/03/18/Tacos-lab1-directions/image-20240324194932498.png","hash":"9132488a852b1a92d90d4cfffa19f5a3a00fd31b","modified":1711291370607},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1711291370607},{"_id":"public/css/cyberpunk.css","hash":"b462177bee11f76e84e649f8192d5a68cb4b1402","modified":1711291370607},{"_id":"public/css/default.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1711291370607},{"_id":"public/css/style.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1711291370607},{"_id":"public/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1711291370607},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1711291370607},{"_id":"public/js/main.js","hash":"37f3b16fbd9668b9496d5f2d9bd9fb22fc6cee27","modified":1711291370607},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1711291370607},{"_id":"public/img/avatar.png","hash":"3c769e11d4c25d326276b7b96c7312571c194fc6","modified":1711291370607},{"_id":"public/2024/03/18/Tacos-lab1-directions/image-20240324210533293.png","hash":"0e72d6a522f8c89dab5d78ed1efe8a73bdfd3b11","modified":1711291370607}],"Category":[{"name":"Theoretical Computer Science(TCS)","_id":"clu5mp4rf0005wkfye6l11stf"},{"name":"Configuration","_id":"clu5mp4rf0007wkfy7q68a1rq"},{"name":"Automata","parent":"clu5mp4rf0005wkfye6l11stf","_id":"clu5mp4rf0008wkfyg4sehhri"},{"name":"Operating System","_id":"clu5mp4rg000fwkfyd032e7d5"}],"Data":[],"Page":[{"title":"About","date":"2024-03-14T15:07:13.000Z","_content":"\n哇，恭喜你发现了这个神奇的角落！\n\n但可惜的是，现在这里还啥都没有...🥲\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2024-03-14 23:07:13\n---\n\n哇，恭喜你发现了这个神奇的角落！\n\n但可惜的是，现在这里还啥都没有...🥲\n","updated":"2024-03-24T13:12:22.480Z","path":"about/index.html","comments":1,"layout":"page","_id":"clu5mp4r90000wkfygc1qgfji","content":"<p>哇，恭喜你发现了这个神奇的角落！</p>\n<p>但可惜的是，现在这里还啥都没有…🥲</p>\n","excerpt":"","more":"<p>哇，恭喜你发现了这个神奇的角落！</p>\n<p>但可惜的是，现在这里还啥都没有…🥲</p>\n"}],"Post":[{"title":"Fragment of my Fantasy","date":"2024-03-24T13:15:54.000Z","_content":"\n有感而发的小东西，点子不错，文笔有限。\n\n<!-- more -->\n\n## 夜曲\n\n老人递给陆启明一架小马扎，招呼他坐下。老人的声音微微颤抖着，那双爬满皱纹的大手却沉稳有力。陆启明接过板凳靠窗坐下，壁炉内噼啪燃烧的木柴让他感觉到些许温暖，他不由地出了神。行囊已经打点妥当，卸下沉甸甸的小型mu-介子探测器后，他的双肩轻松了许多。这些仪器都是陆启明费了好大劲才从研究所物资保管室里折腾出来的，他由衷地希望这些天的探测能让它们物有所值。\n\n“这年头，来这地方的年轻人可不多见喽”，老人的话将陆启明从思绪中拉了回来。自从科威特科考站设立已经过去了百余个年头，在拔地而起的高强度纤维结织而成的楼房内居住的人们早已不用抱膝在炉火前颤栗在寒冷的风中。一如陆启明所料，这栋小屋仍然维持着原样——至少和导师描述中的那栋小屋别无二致，但令他欣喜是，老人依然在照料着这里。当三十年前的导师刚踏上这片孤独的土地时，在这座与世隔绝的小屋内，老人是否也和他有过同样的对话？\n\n“法格答尔火山最近正处于活跃期，您在这里待了这么长时间，一定目睹过它的无数次喷发吧”。陆启明望向窗外，如冰川般淡蓝色的天空被夕阳染红了半边，零星点缀在永久冻土上的皑皑白雪在余光中闪烁，蜿蜒伸向远方的公路是可视范围内唯一的人造物。法格答尔火山静穆在公路消失的那一头，在与之接壤，洒满金黄色辉光的国家地质公园旁显得格外暗淡。不过陆启明提醒着自己，这里可是整个北半球地质活动最为活跃的地区，光是一个月内有明显震感的地震就不下百次。\n\n“那是当然。我对这火山就像对自己的脉搏一样熟悉，”老人爽朗的笑声似乎轻轻触动到了陆启明心中的什么，“运气好的话咱们今晚就能目睹一次喷发。” \n\n老人给年轻人斟满茶，屋子渐渐暖和了起来。他们聊起了这栋小屋的过去，聊起了三十年前的导师，老人笑眯眯地称赞说那是一个相当有趣的小伙子，他们一起丈量了方圆百里内的每一寸土地。年轻人激动地向老人讲述他的研究课题，老人说他还记得当年便携式钻探工具的模样，那双安装过无数次固定螺栓、记录过无数测绘数据的手，不会忘记与土地对话的感觉。温馨的小屋内时间总是流逝得格外迅速。\n\n天色完全暗了下来，起初是远处零星的暗红色火光吸引了陆启明的注意，当他抬头正视，刺目的岩浆在火山口飞溅爆裂，寂静的暗夜被硬生生烫出了一个洞。灼热的深灰色烟雾在火光中摇摆翻腾，罩住了整片冻原，这舞台的帷幕，仅有大地一位演员。陆启明发现自己已经站起身来。老人铁一般瘦削的身影被映得赤红，雪原上的一切都在飞速地离陆启明而去，只有那颗不规则的巨大心脏在搏动。闪烁的岩浆流挟着浓烟沿着山脊流淌，扑面而来的高温与气浪让陆启明无需借用黑体辐射的铁律也能感知到其磅礴的能量。他幻想着自己是在宇宙中心蜷缩着的光的婴儿，无声的啼哭使无数恒星为之黯淡。一切太安静了，出奇地安静。强烈的眩晕感让陆启明有那么一瞬间怀疑这一切的真实性——安静的婴儿，无声的啼哭，就像一场梦一般。\n\n就像一场栖息在心底的、遥远的梦。\n\n陆启明似乎又回到了那天傍晚，窗外的街道如玩具般被撕裂开来，那是他每日上学都必经的街道。他眼睁睁地看着一辆印着汰渍洗衣液广告的双层公交车失速坠入，后排乘客在消失在视线内的那一刻摇下车窗。他小时候很爱弹钢琴，他喜欢听那些由小小的黑白琴键交织而成的宏伟乐曲，喜欢榔头轻击在琴弦上发出的清脆乐音。钢琴猛然倒地，琴键砸向地面的刺耳声音让他吓了一跳。父母抱着他冲出了楼房，一台坠落的空调外机却夺去了他最好的朋友的生命。轰然倒塌，烟尘弥散，夕阳的余晖穿不透这滚滚浓烟，他什么也看不见。\n\n在高考填报志愿的时候，他不加思索直接选择了地球物理专业。他常常梦见那个傍晚，那辆公交车，那个最好的朋友。琴弦崩坏的杂音让他辗转反侧，是啊，他畏惧着大地，怕得发抖。哺育一切的大地，势如洪流般摧毁一切的大地，是一种怎样的存在？\n\n“别盯着火山口看太久，很伤眼睛的”。老人轻轻叹了口气，丢给陆启明一副墨镜，示意他在身旁坐下，他知道陆启明的眼中闪烁着的是什么。“三十年前的我和你如出一辙，那时候地质学的发展已经趋于停滞，任何对于解读长程地质活动的努力均以失败告终，再也没有新的理论被提出了。这领域越是深入，你越会觉得，其实自己对地球一无所知，直到我遇见了你的导师，”老人抬起头，远处的火光在他的眼中跃动。\n\n“是时候给你讲讲落日工程的故事了。”\n\n三十年前，科学界已经掌握用可控小型核爆与特殊材料“糖衣”稳定制造高密度中子材料的技术。核爆产生的巨大向心压力，被“糖衣”均匀地分配至里面包裹的物质表面，得到的物质甚至能在固态的岩石中下沉。后来的落日一号至计划发射的落日十号飞船的主体正是这种材料，只不过发射的目标不是星辰大海，而是地心深处。\n\n陆启明对这个故事的开头再熟悉不过。最美丽的花草都被人们放在肃穆的落日六号纪念碑前，透过树荫的霞光将纪念碑的影子拉得狭长。纪念公园离他的大学很近，他闲暇时常去那里坐坐。秋日的公园宁静而祥和，要是迷失在地心的落日六号领航员沈静前辈也能伸出手指轻抚这里的微风，那该多好。但令人遗憾的是，落日七号至十号却因为工程原因被无限期地搁置。\n\n“我想告诉你的，是在落日一号之前的那些故事。”\n\n“三十年前，我和你的导师相遇了。当时你的导师正在实验室里对着几篇打印出的论文发火，它们是其他学者发表在地质预测会议上面的。我翻了翻这几篇论文，都是一些对于现有基于地表观测数据的模型的精细修改。我记不太清这些论文的具体细节了，听说过本轮和均轮吗？”\n\n陆启明摇头。老人挥了挥手，“也罢，现在还记得这几个词的都成老古董了。只是经过那几篇论文的轮番修改，原本的模型已经变得臃肿不堪。他当时都不屑于复现那些论文，我跟另外几位博士在科研之余试了试，发现这些修改确实在1到2年的周期内在划定的小规模区域内都能达到非常精确的预测结果，但一旦将时间跨度拉长，误差就会大到和随机无异了。”\n\n清冽的月光织出一条白银缎带，泛着微微深红的火山岩尚有余温，大地似乎又沉沉睡去。“你的导师是对的，他的直觉总是能达到令人恐怖的准确率。我们发现理论的每次预测失效都在新出现的大火山的活动周期内，一旦产生了这样的偏差，后续预测便再难准确。”\n\n“后来，我带他来这个远在北极圈内的科考站逛逛。那次我们在这里待了老长一段时间，这儿可是潜心研究的好地方，不过你的导师似乎有些别的看法…直到有一天，我们近距离目睹了法格答尔火山的喷发。”\n\n“尽管那一次的喷发比我们刚刚看到的规模要小不少，但他却直接坐在地上，望着火山口沉默良久，初春时这里的积雪都还没完全化干净。当我想从包里拿出一张折叠椅递给他时，他回头直勾勾地看着我。”\n\n“他少见地直呼我的名字，‘也许我们的方向一直错了，’他支起身来，我清晰地记得他的裤子被体温融化的积雪沾湿了大片，但他却将身体挺的笔直，‘我们这么多年，这么多学者观测到的数据都只不过是…’”\n\n“....都只不过是地核之中岩浆和铁镍流体相互作用在地表上形成的的具象，对它们的测量再如何精确，也仅仅是在肢体末端测量人的脉搏而已。”陆启明轻轻点头，导师的音容相貌又重被从记忆中拾起，他不由地长叹一声。\n\n“精妙的比喻。正是怀揣着这样的想法，国家地核物理实验室成立了，你的导师担任第一任首席科学顾问。他们规划着设计一系列耐极高温、高灵敏度的流体动力学探测器，并将它们发往地心，通过不受干扰的中微子通信收集数据，进而设计数学模型尝试推算整个地球的地质运动。这个计划后来更名为，落日工程。”\n\n“啊，但我记得落日工程的第一任 CTO 是…”\n\n老人摇了摇头，“当落日工程启动的时候，他已经离我们而去”。\n\n陆启明抬头望向天空，火山的余烬已然褪去，在这里能看见北半球最为浩瀚的星空。参宿四和参宿七张成一张巨弓，湛蓝的三颗腰带正如蓄势待发射向大犬座的弓箭——陆启明很喜欢将它们当作弓箭。天狼星无疑是大犬座中最耀眼的一颗，群青色的辉光弥散在夜幕中。银河如天龙一般横跨苍穹，无数恒星的色彩穿透星云凝固在整片夜空上。陆启明深知自己正处于远离城市光源的荒原，在这片静谧之地，他的心情却波澜起伏。\n\n第二天清晨，陆启明背上背包早早地就出发了。老人又斟了一杯热茶为他送行。“祝愿你能在这里找到导师毕生追求的东西。”临行前老人意味深长地看着他。\n\n小屋冒出的一缕炊烟让陆启明忽然有种言说不出的感动，陆启明反复品味着老人的目光。\n","source":"_posts/Fragment-of-my-Fantasy.md","raw":"---\ntitle: Fragment of my Fantasy\ndate: 2024-03-24 21:15:54\ntags:\n---\n\n有感而发的小东西，点子不错，文笔有限。\n\n<!-- more -->\n\n## 夜曲\n\n老人递给陆启明一架小马扎，招呼他坐下。老人的声音微微颤抖着，那双爬满皱纹的大手却沉稳有力。陆启明接过板凳靠窗坐下，壁炉内噼啪燃烧的木柴让他感觉到些许温暖，他不由地出了神。行囊已经打点妥当，卸下沉甸甸的小型mu-介子探测器后，他的双肩轻松了许多。这些仪器都是陆启明费了好大劲才从研究所物资保管室里折腾出来的，他由衷地希望这些天的探测能让它们物有所值。\n\n“这年头，来这地方的年轻人可不多见喽”，老人的话将陆启明从思绪中拉了回来。自从科威特科考站设立已经过去了百余个年头，在拔地而起的高强度纤维结织而成的楼房内居住的人们早已不用抱膝在炉火前颤栗在寒冷的风中。一如陆启明所料，这栋小屋仍然维持着原样——至少和导师描述中的那栋小屋别无二致，但令他欣喜是，老人依然在照料着这里。当三十年前的导师刚踏上这片孤独的土地时，在这座与世隔绝的小屋内，老人是否也和他有过同样的对话？\n\n“法格答尔火山最近正处于活跃期，您在这里待了这么长时间，一定目睹过它的无数次喷发吧”。陆启明望向窗外，如冰川般淡蓝色的天空被夕阳染红了半边，零星点缀在永久冻土上的皑皑白雪在余光中闪烁，蜿蜒伸向远方的公路是可视范围内唯一的人造物。法格答尔火山静穆在公路消失的那一头，在与之接壤，洒满金黄色辉光的国家地质公园旁显得格外暗淡。不过陆启明提醒着自己，这里可是整个北半球地质活动最为活跃的地区，光是一个月内有明显震感的地震就不下百次。\n\n“那是当然。我对这火山就像对自己的脉搏一样熟悉，”老人爽朗的笑声似乎轻轻触动到了陆启明心中的什么，“运气好的话咱们今晚就能目睹一次喷发。” \n\n老人给年轻人斟满茶，屋子渐渐暖和了起来。他们聊起了这栋小屋的过去，聊起了三十年前的导师，老人笑眯眯地称赞说那是一个相当有趣的小伙子，他们一起丈量了方圆百里内的每一寸土地。年轻人激动地向老人讲述他的研究课题，老人说他还记得当年便携式钻探工具的模样，那双安装过无数次固定螺栓、记录过无数测绘数据的手，不会忘记与土地对话的感觉。温馨的小屋内时间总是流逝得格外迅速。\n\n天色完全暗了下来，起初是远处零星的暗红色火光吸引了陆启明的注意，当他抬头正视，刺目的岩浆在火山口飞溅爆裂，寂静的暗夜被硬生生烫出了一个洞。灼热的深灰色烟雾在火光中摇摆翻腾，罩住了整片冻原，这舞台的帷幕，仅有大地一位演员。陆启明发现自己已经站起身来。老人铁一般瘦削的身影被映得赤红，雪原上的一切都在飞速地离陆启明而去，只有那颗不规则的巨大心脏在搏动。闪烁的岩浆流挟着浓烟沿着山脊流淌，扑面而来的高温与气浪让陆启明无需借用黑体辐射的铁律也能感知到其磅礴的能量。他幻想着自己是在宇宙中心蜷缩着的光的婴儿，无声的啼哭使无数恒星为之黯淡。一切太安静了，出奇地安静。强烈的眩晕感让陆启明有那么一瞬间怀疑这一切的真实性——安静的婴儿，无声的啼哭，就像一场梦一般。\n\n就像一场栖息在心底的、遥远的梦。\n\n陆启明似乎又回到了那天傍晚，窗外的街道如玩具般被撕裂开来，那是他每日上学都必经的街道。他眼睁睁地看着一辆印着汰渍洗衣液广告的双层公交车失速坠入，后排乘客在消失在视线内的那一刻摇下车窗。他小时候很爱弹钢琴，他喜欢听那些由小小的黑白琴键交织而成的宏伟乐曲，喜欢榔头轻击在琴弦上发出的清脆乐音。钢琴猛然倒地，琴键砸向地面的刺耳声音让他吓了一跳。父母抱着他冲出了楼房，一台坠落的空调外机却夺去了他最好的朋友的生命。轰然倒塌，烟尘弥散，夕阳的余晖穿不透这滚滚浓烟，他什么也看不见。\n\n在高考填报志愿的时候，他不加思索直接选择了地球物理专业。他常常梦见那个傍晚，那辆公交车，那个最好的朋友。琴弦崩坏的杂音让他辗转反侧，是啊，他畏惧着大地，怕得发抖。哺育一切的大地，势如洪流般摧毁一切的大地，是一种怎样的存在？\n\n“别盯着火山口看太久，很伤眼睛的”。老人轻轻叹了口气，丢给陆启明一副墨镜，示意他在身旁坐下，他知道陆启明的眼中闪烁着的是什么。“三十年前的我和你如出一辙，那时候地质学的发展已经趋于停滞，任何对于解读长程地质活动的努力均以失败告终，再也没有新的理论被提出了。这领域越是深入，你越会觉得，其实自己对地球一无所知，直到我遇见了你的导师，”老人抬起头，远处的火光在他的眼中跃动。\n\n“是时候给你讲讲落日工程的故事了。”\n\n三十年前，科学界已经掌握用可控小型核爆与特殊材料“糖衣”稳定制造高密度中子材料的技术。核爆产生的巨大向心压力，被“糖衣”均匀地分配至里面包裹的物质表面，得到的物质甚至能在固态的岩石中下沉。后来的落日一号至计划发射的落日十号飞船的主体正是这种材料，只不过发射的目标不是星辰大海，而是地心深处。\n\n陆启明对这个故事的开头再熟悉不过。最美丽的花草都被人们放在肃穆的落日六号纪念碑前，透过树荫的霞光将纪念碑的影子拉得狭长。纪念公园离他的大学很近，他闲暇时常去那里坐坐。秋日的公园宁静而祥和，要是迷失在地心的落日六号领航员沈静前辈也能伸出手指轻抚这里的微风，那该多好。但令人遗憾的是，落日七号至十号却因为工程原因被无限期地搁置。\n\n“我想告诉你的，是在落日一号之前的那些故事。”\n\n“三十年前，我和你的导师相遇了。当时你的导师正在实验室里对着几篇打印出的论文发火，它们是其他学者发表在地质预测会议上面的。我翻了翻这几篇论文，都是一些对于现有基于地表观测数据的模型的精细修改。我记不太清这些论文的具体细节了，听说过本轮和均轮吗？”\n\n陆启明摇头。老人挥了挥手，“也罢，现在还记得这几个词的都成老古董了。只是经过那几篇论文的轮番修改，原本的模型已经变得臃肿不堪。他当时都不屑于复现那些论文，我跟另外几位博士在科研之余试了试，发现这些修改确实在1到2年的周期内在划定的小规模区域内都能达到非常精确的预测结果，但一旦将时间跨度拉长，误差就会大到和随机无异了。”\n\n清冽的月光织出一条白银缎带，泛着微微深红的火山岩尚有余温，大地似乎又沉沉睡去。“你的导师是对的，他的直觉总是能达到令人恐怖的准确率。我们发现理论的每次预测失效都在新出现的大火山的活动周期内，一旦产生了这样的偏差，后续预测便再难准确。”\n\n“后来，我带他来这个远在北极圈内的科考站逛逛。那次我们在这里待了老长一段时间，这儿可是潜心研究的好地方，不过你的导师似乎有些别的看法…直到有一天，我们近距离目睹了法格答尔火山的喷发。”\n\n“尽管那一次的喷发比我们刚刚看到的规模要小不少，但他却直接坐在地上，望着火山口沉默良久，初春时这里的积雪都还没完全化干净。当我想从包里拿出一张折叠椅递给他时，他回头直勾勾地看着我。”\n\n“他少见地直呼我的名字，‘也许我们的方向一直错了，’他支起身来，我清晰地记得他的裤子被体温融化的积雪沾湿了大片，但他却将身体挺的笔直，‘我们这么多年，这么多学者观测到的数据都只不过是…’”\n\n“....都只不过是地核之中岩浆和铁镍流体相互作用在地表上形成的的具象，对它们的测量再如何精确，也仅仅是在肢体末端测量人的脉搏而已。”陆启明轻轻点头，导师的音容相貌又重被从记忆中拾起，他不由地长叹一声。\n\n“精妙的比喻。正是怀揣着这样的想法，国家地核物理实验室成立了，你的导师担任第一任首席科学顾问。他们规划着设计一系列耐极高温、高灵敏度的流体动力学探测器，并将它们发往地心，通过不受干扰的中微子通信收集数据，进而设计数学模型尝试推算整个地球的地质运动。这个计划后来更名为，落日工程。”\n\n“啊，但我记得落日工程的第一任 CTO 是…”\n\n老人摇了摇头，“当落日工程启动的时候，他已经离我们而去”。\n\n陆启明抬头望向天空，火山的余烬已然褪去，在这里能看见北半球最为浩瀚的星空。参宿四和参宿七张成一张巨弓，湛蓝的三颗腰带正如蓄势待发射向大犬座的弓箭——陆启明很喜欢将它们当作弓箭。天狼星无疑是大犬座中最耀眼的一颗，群青色的辉光弥散在夜幕中。银河如天龙一般横跨苍穹，无数恒星的色彩穿透星云凝固在整片夜空上。陆启明深知自己正处于远离城市光源的荒原，在这片静谧之地，他的心情却波澜起伏。\n\n第二天清晨，陆启明背上背包早早地就出发了。老人又斟了一杯热茶为他送行。“祝愿你能在这里找到导师毕生追求的东西。”临行前老人意味深长地看着他。\n\n小屋冒出的一缕炊烟让陆启明忽然有种言说不出的感动，陆启明反复品味着老人的目光。\n","slug":"Fragment-of-my-Fantasy","published":1,"updated":"2024-03-24T13:18:13.549Z","comments":1,"layout":"post","photos":[],"_id":"clu5mp4rc0001wkfydwayghbs","content":"<p>有感而发的小东西，点子不错，文笔有限。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"夜曲\"><a href=\"#夜曲\" class=\"headerlink\" title=\"夜曲\"></a>夜曲</h2><p>老人递给陆启明一架小马扎，招呼他坐下。老人的声音微微颤抖着，那双爬满皱纹的大手却沉稳有力。陆启明接过板凳靠窗坐下，壁炉内噼啪燃烧的木柴让他感觉到些许温暖，他不由地出了神。行囊已经打点妥当，卸下沉甸甸的小型mu-介子探测器后，他的双肩轻松了许多。这些仪器都是陆启明费了好大劲才从研究所物资保管室里折腾出来的，他由衷地希望这些天的探测能让它们物有所值。</p>\n<p>“这年头，来这地方的年轻人可不多见喽”，老人的话将陆启明从思绪中拉了回来。自从科威特科考站设立已经过去了百余个年头，在拔地而起的高强度纤维结织而成的楼房内居住的人们早已不用抱膝在炉火前颤栗在寒冷的风中。一如陆启明所料，这栋小屋仍然维持着原样——至少和导师描述中的那栋小屋别无二致，但令他欣喜是，老人依然在照料着这里。当三十年前的导师刚踏上这片孤独的土地时，在这座与世隔绝的小屋内，老人是否也和他有过同样的对话？</p>\n<p>“法格答尔火山最近正处于活跃期，您在这里待了这么长时间，一定目睹过它的无数次喷发吧”。陆启明望向窗外，如冰川般淡蓝色的天空被夕阳染红了半边，零星点缀在永久冻土上的皑皑白雪在余光中闪烁，蜿蜒伸向远方的公路是可视范围内唯一的人造物。法格答尔火山静穆在公路消失的那一头，在与之接壤，洒满金黄色辉光的国家地质公园旁显得格外暗淡。不过陆启明提醒着自己，这里可是整个北半球地质活动最为活跃的地区，光是一个月内有明显震感的地震就不下百次。</p>\n<p>“那是当然。我对这火山就像对自己的脉搏一样熟悉，”老人爽朗的笑声似乎轻轻触动到了陆启明心中的什么，“运气好的话咱们今晚就能目睹一次喷发。” </p>\n<p>老人给年轻人斟满茶，屋子渐渐暖和了起来。他们聊起了这栋小屋的过去，聊起了三十年前的导师，老人笑眯眯地称赞说那是一个相当有趣的小伙子，他们一起丈量了方圆百里内的每一寸土地。年轻人激动地向老人讲述他的研究课题，老人说他还记得当年便携式钻探工具的模样，那双安装过无数次固定螺栓、记录过无数测绘数据的手，不会忘记与土地对话的感觉。温馨的小屋内时间总是流逝得格外迅速。</p>\n<p>天色完全暗了下来，起初是远处零星的暗红色火光吸引了陆启明的注意，当他抬头正视，刺目的岩浆在火山口飞溅爆裂，寂静的暗夜被硬生生烫出了一个洞。灼热的深灰色烟雾在火光中摇摆翻腾，罩住了整片冻原，这舞台的帷幕，仅有大地一位演员。陆启明发现自己已经站起身来。老人铁一般瘦削的身影被映得赤红，雪原上的一切都在飞速地离陆启明而去，只有那颗不规则的巨大心脏在搏动。闪烁的岩浆流挟着浓烟沿着山脊流淌，扑面而来的高温与气浪让陆启明无需借用黑体辐射的铁律也能感知到其磅礴的能量。他幻想着自己是在宇宙中心蜷缩着的光的婴儿，无声的啼哭使无数恒星为之黯淡。一切太安静了，出奇地安静。强烈的眩晕感让陆启明有那么一瞬间怀疑这一切的真实性——安静的婴儿，无声的啼哭，就像一场梦一般。</p>\n<p>就像一场栖息在心底的、遥远的梦。</p>\n<p>陆启明似乎又回到了那天傍晚，窗外的街道如玩具般被撕裂开来，那是他每日上学都必经的街道。他眼睁睁地看着一辆印着汰渍洗衣液广告的双层公交车失速坠入，后排乘客在消失在视线内的那一刻摇下车窗。他小时候很爱弹钢琴，他喜欢听那些由小小的黑白琴键交织而成的宏伟乐曲，喜欢榔头轻击在琴弦上发出的清脆乐音。钢琴猛然倒地，琴键砸向地面的刺耳声音让他吓了一跳。父母抱着他冲出了楼房，一台坠落的空调外机却夺去了他最好的朋友的生命。轰然倒塌，烟尘弥散，夕阳的余晖穿不透这滚滚浓烟，他什么也看不见。</p>\n<p>在高考填报志愿的时候，他不加思索直接选择了地球物理专业。他常常梦见那个傍晚，那辆公交车，那个最好的朋友。琴弦崩坏的杂音让他辗转反侧，是啊，他畏惧着大地，怕得发抖。哺育一切的大地，势如洪流般摧毁一切的大地，是一种怎样的存在？</p>\n<p>“别盯着火山口看太久，很伤眼睛的”。老人轻轻叹了口气，丢给陆启明一副墨镜，示意他在身旁坐下，他知道陆启明的眼中闪烁着的是什么。“三十年前的我和你如出一辙，那时候地质学的发展已经趋于停滞，任何对于解读长程地质活动的努力均以失败告终，再也没有新的理论被提出了。这领域越是深入，你越会觉得，其实自己对地球一无所知，直到我遇见了你的导师，”老人抬起头，远处的火光在他的眼中跃动。</p>\n<p>“是时候给你讲讲落日工程的故事了。”</p>\n<p>三十年前，科学界已经掌握用可控小型核爆与特殊材料“糖衣”稳定制造高密度中子材料的技术。核爆产生的巨大向心压力，被“糖衣”均匀地分配至里面包裹的物质表面，得到的物质甚至能在固态的岩石中下沉。后来的落日一号至计划发射的落日十号飞船的主体正是这种材料，只不过发射的目标不是星辰大海，而是地心深处。</p>\n<p>陆启明对这个故事的开头再熟悉不过。最美丽的花草都被人们放在肃穆的落日六号纪念碑前，透过树荫的霞光将纪念碑的影子拉得狭长。纪念公园离他的大学很近，他闲暇时常去那里坐坐。秋日的公园宁静而祥和，要是迷失在地心的落日六号领航员沈静前辈也能伸出手指轻抚这里的微风，那该多好。但令人遗憾的是，落日七号至十号却因为工程原因被无限期地搁置。</p>\n<p>“我想告诉你的，是在落日一号之前的那些故事。”</p>\n<p>“三十年前，我和你的导师相遇了。当时你的导师正在实验室里对着几篇打印出的论文发火，它们是其他学者发表在地质预测会议上面的。我翻了翻这几篇论文，都是一些对于现有基于地表观测数据的模型的精细修改。我记不太清这些论文的具体细节了，听说过本轮和均轮吗？”</p>\n<p>陆启明摇头。老人挥了挥手，“也罢，现在还记得这几个词的都成老古董了。只是经过那几篇论文的轮番修改，原本的模型已经变得臃肿不堪。他当时都不屑于复现那些论文，我跟另外几位博士在科研之余试了试，发现这些修改确实在1到2年的周期内在划定的小规模区域内都能达到非常精确的预测结果，但一旦将时间跨度拉长，误差就会大到和随机无异了。”</p>\n<p>清冽的月光织出一条白银缎带，泛着微微深红的火山岩尚有余温，大地似乎又沉沉睡去。“你的导师是对的，他的直觉总是能达到令人恐怖的准确率。我们发现理论的每次预测失效都在新出现的大火山的活动周期内，一旦产生了这样的偏差，后续预测便再难准确。”</p>\n<p>“后来，我带他来这个远在北极圈内的科考站逛逛。那次我们在这里待了老长一段时间，这儿可是潜心研究的好地方，不过你的导师似乎有些别的看法…直到有一天，我们近距离目睹了法格答尔火山的喷发。”</p>\n<p>“尽管那一次的喷发比我们刚刚看到的规模要小不少，但他却直接坐在地上，望着火山口沉默良久，初春时这里的积雪都还没完全化干净。当我想从包里拿出一张折叠椅递给他时，他回头直勾勾地看着我。”</p>\n<p>“他少见地直呼我的名字，‘也许我们的方向一直错了，’他支起身来，我清晰地记得他的裤子被体温融化的积雪沾湿了大片，但他却将身体挺的笔直，‘我们这么多年，这么多学者观测到的数据都只不过是…’”</p>\n<p>“….都只不过是地核之中岩浆和铁镍流体相互作用在地表上形成的的具象，对它们的测量再如何精确，也仅仅是在肢体末端测量人的脉搏而已。”陆启明轻轻点头，导师的音容相貌又重被从记忆中拾起，他不由地长叹一声。</p>\n<p>“精妙的比喻。正是怀揣着这样的想法，国家地核物理实验室成立了，你的导师担任第一任首席科学顾问。他们规划着设计一系列耐极高温、高灵敏度的流体动力学探测器，并将它们发往地心，通过不受干扰的中微子通信收集数据，进而设计数学模型尝试推算整个地球的地质运动。这个计划后来更名为，落日工程。”</p>\n<p>“啊，但我记得落日工程的第一任 CTO 是…”</p>\n<p>老人摇了摇头，“当落日工程启动的时候，他已经离我们而去”。</p>\n<p>陆启明抬头望向天空，火山的余烬已然褪去，在这里能看见北半球最为浩瀚的星空。参宿四和参宿七张成一张巨弓，湛蓝的三颗腰带正如蓄势待发射向大犬座的弓箭——陆启明很喜欢将它们当作弓箭。天狼星无疑是大犬座中最耀眼的一颗，群青色的辉光弥散在夜幕中。银河如天龙一般横跨苍穹，无数恒星的色彩穿透星云凝固在整片夜空上。陆启明深知自己正处于远离城市光源的荒原，在这片静谧之地，他的心情却波澜起伏。</p>\n<p>第二天清晨，陆启明背上背包早早地就出发了。老人又斟了一杯热茶为他送行。“祝愿你能在这里找到导师毕生追求的东西。”临行前老人意味深长地看着他。</p>\n<p>小屋冒出的一缕炊烟让陆启明忽然有种言说不出的感动，陆启明反复品味着老人的目光。</p>\n","excerpt":"<p>有感而发的小东西，点子不错，文笔有限。</p>","more":"<h2 id=\"夜曲\"><a href=\"#夜曲\" class=\"headerlink\" title=\"夜曲\"></a>夜曲</h2><p>老人递给陆启明一架小马扎，招呼他坐下。老人的声音微微颤抖着，那双爬满皱纹的大手却沉稳有力。陆启明接过板凳靠窗坐下，壁炉内噼啪燃烧的木柴让他感觉到些许温暖，他不由地出了神。行囊已经打点妥当，卸下沉甸甸的小型mu-介子探测器后，他的双肩轻松了许多。这些仪器都是陆启明费了好大劲才从研究所物资保管室里折腾出来的，他由衷地希望这些天的探测能让它们物有所值。</p>\n<p>“这年头，来这地方的年轻人可不多见喽”，老人的话将陆启明从思绪中拉了回来。自从科威特科考站设立已经过去了百余个年头，在拔地而起的高强度纤维结织而成的楼房内居住的人们早已不用抱膝在炉火前颤栗在寒冷的风中。一如陆启明所料，这栋小屋仍然维持着原样——至少和导师描述中的那栋小屋别无二致，但令他欣喜是，老人依然在照料着这里。当三十年前的导师刚踏上这片孤独的土地时，在这座与世隔绝的小屋内，老人是否也和他有过同样的对话？</p>\n<p>“法格答尔火山最近正处于活跃期，您在这里待了这么长时间，一定目睹过它的无数次喷发吧”。陆启明望向窗外，如冰川般淡蓝色的天空被夕阳染红了半边，零星点缀在永久冻土上的皑皑白雪在余光中闪烁，蜿蜒伸向远方的公路是可视范围内唯一的人造物。法格答尔火山静穆在公路消失的那一头，在与之接壤，洒满金黄色辉光的国家地质公园旁显得格外暗淡。不过陆启明提醒着自己，这里可是整个北半球地质活动最为活跃的地区，光是一个月内有明显震感的地震就不下百次。</p>\n<p>“那是当然。我对这火山就像对自己的脉搏一样熟悉，”老人爽朗的笑声似乎轻轻触动到了陆启明心中的什么，“运气好的话咱们今晚就能目睹一次喷发。” </p>\n<p>老人给年轻人斟满茶，屋子渐渐暖和了起来。他们聊起了这栋小屋的过去，聊起了三十年前的导师，老人笑眯眯地称赞说那是一个相当有趣的小伙子，他们一起丈量了方圆百里内的每一寸土地。年轻人激动地向老人讲述他的研究课题，老人说他还记得当年便携式钻探工具的模样，那双安装过无数次固定螺栓、记录过无数测绘数据的手，不会忘记与土地对话的感觉。温馨的小屋内时间总是流逝得格外迅速。</p>\n<p>天色完全暗了下来，起初是远处零星的暗红色火光吸引了陆启明的注意，当他抬头正视，刺目的岩浆在火山口飞溅爆裂，寂静的暗夜被硬生生烫出了一个洞。灼热的深灰色烟雾在火光中摇摆翻腾，罩住了整片冻原，这舞台的帷幕，仅有大地一位演员。陆启明发现自己已经站起身来。老人铁一般瘦削的身影被映得赤红，雪原上的一切都在飞速地离陆启明而去，只有那颗不规则的巨大心脏在搏动。闪烁的岩浆流挟着浓烟沿着山脊流淌，扑面而来的高温与气浪让陆启明无需借用黑体辐射的铁律也能感知到其磅礴的能量。他幻想着自己是在宇宙中心蜷缩着的光的婴儿，无声的啼哭使无数恒星为之黯淡。一切太安静了，出奇地安静。强烈的眩晕感让陆启明有那么一瞬间怀疑这一切的真实性——安静的婴儿，无声的啼哭，就像一场梦一般。</p>\n<p>就像一场栖息在心底的、遥远的梦。</p>\n<p>陆启明似乎又回到了那天傍晚，窗外的街道如玩具般被撕裂开来，那是他每日上学都必经的街道。他眼睁睁地看着一辆印着汰渍洗衣液广告的双层公交车失速坠入，后排乘客在消失在视线内的那一刻摇下车窗。他小时候很爱弹钢琴，他喜欢听那些由小小的黑白琴键交织而成的宏伟乐曲，喜欢榔头轻击在琴弦上发出的清脆乐音。钢琴猛然倒地，琴键砸向地面的刺耳声音让他吓了一跳。父母抱着他冲出了楼房，一台坠落的空调外机却夺去了他最好的朋友的生命。轰然倒塌，烟尘弥散，夕阳的余晖穿不透这滚滚浓烟，他什么也看不见。</p>\n<p>在高考填报志愿的时候，他不加思索直接选择了地球物理专业。他常常梦见那个傍晚，那辆公交车，那个最好的朋友。琴弦崩坏的杂音让他辗转反侧，是啊，他畏惧着大地，怕得发抖。哺育一切的大地，势如洪流般摧毁一切的大地，是一种怎样的存在？</p>\n<p>“别盯着火山口看太久，很伤眼睛的”。老人轻轻叹了口气，丢给陆启明一副墨镜，示意他在身旁坐下，他知道陆启明的眼中闪烁着的是什么。“三十年前的我和你如出一辙，那时候地质学的发展已经趋于停滞，任何对于解读长程地质活动的努力均以失败告终，再也没有新的理论被提出了。这领域越是深入，你越会觉得，其实自己对地球一无所知，直到我遇见了你的导师，”老人抬起头，远处的火光在他的眼中跃动。</p>\n<p>“是时候给你讲讲落日工程的故事了。”</p>\n<p>三十年前，科学界已经掌握用可控小型核爆与特殊材料“糖衣”稳定制造高密度中子材料的技术。核爆产生的巨大向心压力，被“糖衣”均匀地分配至里面包裹的物质表面，得到的物质甚至能在固态的岩石中下沉。后来的落日一号至计划发射的落日十号飞船的主体正是这种材料，只不过发射的目标不是星辰大海，而是地心深处。</p>\n<p>陆启明对这个故事的开头再熟悉不过。最美丽的花草都被人们放在肃穆的落日六号纪念碑前，透过树荫的霞光将纪念碑的影子拉得狭长。纪念公园离他的大学很近，他闲暇时常去那里坐坐。秋日的公园宁静而祥和，要是迷失在地心的落日六号领航员沈静前辈也能伸出手指轻抚这里的微风，那该多好。但令人遗憾的是，落日七号至十号却因为工程原因被无限期地搁置。</p>\n<p>“我想告诉你的，是在落日一号之前的那些故事。”</p>\n<p>“三十年前，我和你的导师相遇了。当时你的导师正在实验室里对着几篇打印出的论文发火，它们是其他学者发表在地质预测会议上面的。我翻了翻这几篇论文，都是一些对于现有基于地表观测数据的模型的精细修改。我记不太清这些论文的具体细节了，听说过本轮和均轮吗？”</p>\n<p>陆启明摇头。老人挥了挥手，“也罢，现在还记得这几个词的都成老古董了。只是经过那几篇论文的轮番修改，原本的模型已经变得臃肿不堪。他当时都不屑于复现那些论文，我跟另外几位博士在科研之余试了试，发现这些修改确实在1到2年的周期内在划定的小规模区域内都能达到非常精确的预测结果，但一旦将时间跨度拉长，误差就会大到和随机无异了。”</p>\n<p>清冽的月光织出一条白银缎带，泛着微微深红的火山岩尚有余温，大地似乎又沉沉睡去。“你的导师是对的，他的直觉总是能达到令人恐怖的准确率。我们发现理论的每次预测失效都在新出现的大火山的活动周期内，一旦产生了这样的偏差，后续预测便再难准确。”</p>\n<p>“后来，我带他来这个远在北极圈内的科考站逛逛。那次我们在这里待了老长一段时间，这儿可是潜心研究的好地方，不过你的导师似乎有些别的看法…直到有一天，我们近距离目睹了法格答尔火山的喷发。”</p>\n<p>“尽管那一次的喷发比我们刚刚看到的规模要小不少，但他却直接坐在地上，望着火山口沉默良久，初春时这里的积雪都还没完全化干净。当我想从包里拿出一张折叠椅递给他时，他回头直勾勾地看着我。”</p>\n<p>“他少见地直呼我的名字，‘也许我们的方向一直错了，’他支起身来，我清晰地记得他的裤子被体温融化的积雪沾湿了大片，但他却将身体挺的笔直，‘我们这么多年，这么多学者观测到的数据都只不过是…’”</p>\n<p>“….都只不过是地核之中岩浆和铁镍流体相互作用在地表上形成的的具象，对它们的测量再如何精确，也仅仅是在肢体末端测量人的脉搏而已。”陆启明轻轻点头，导师的音容相貌又重被从记忆中拾起，他不由地长叹一声。</p>\n<p>“精妙的比喻。正是怀揣着这样的想法，国家地核物理实验室成立了，你的导师担任第一任首席科学顾问。他们规划着设计一系列耐极高温、高灵敏度的流体动力学探测器，并将它们发往地心，通过不受干扰的中微子通信收集数据，进而设计数学模型尝试推算整个地球的地质运动。这个计划后来更名为，落日工程。”</p>\n<p>“啊，但我记得落日工程的第一任 CTO 是…”</p>\n<p>老人摇了摇头，“当落日工程启动的时候，他已经离我们而去”。</p>\n<p>陆启明抬头望向天空，火山的余烬已然褪去，在这里能看见北半球最为浩瀚的星空。参宿四和参宿七张成一张巨弓，湛蓝的三颗腰带正如蓄势待发射向大犬座的弓箭——陆启明很喜欢将它们当作弓箭。天狼星无疑是大犬座中最耀眼的一颗，群青色的辉光弥散在夜幕中。银河如天龙一般横跨苍穹，无数恒星的色彩穿透星云凝固在整片夜空上。陆启明深知自己正处于远离城市光源的荒原，在这片静谧之地，他的心情却波澜起伏。</p>\n<p>第二天清晨，陆启明背上背包早早地就出发了。老人又斟了一杯热茶为他送行。“祝愿你能在这里找到导师毕生追求的东西。”临行前老人意味深长地看着他。</p>\n<p>小屋冒出的一缕炊烟让陆启明忽然有种言说不出的感动，陆启明反复品味着老人的目光。</p>"},{"title":"Pushdown Automata and Context-free Grammar","date":"2024-03-15T07:44:44.000Z","_content":"\n## Pushdown Automata\n\n下推自动机可以看作是 `NFA` 加入栈后的拓展版本。与 `NFA` 相比，`PDA` 的定义中多了一个“栈”的概念，一个 `PDA` 由六元组 $(Q, \\Sigma, \\Gamma, \\delta, q_0, F)$ 组成。其中：\n\n-  $Q, \\Sigma, q_0, F$​ 与 `NFA` 的定义完全一致，它们分别表示状态，字符集，起始节点，接受节点集。\n- $\\Gamma$ 是栈字符集，它规定了栈中的每个元素可能是什么。我们常常通过往栈中压入或者弹出一个 `$` 来确保当前栈是空的。\n- $\\delta$ 同样是转移函数，但它与 `NFA` 的区别是引入了栈的状态。$\\delta$ 函数接受当前状态、当前栈顶以及一个字符（当然，可以是空串 $\\epsilon$），它的输出是一个目标节点以及对当前栈的操作（不从栈顶读字符并压入一个字符、弹出一个字符、更改栈顶字符或者保持栈不动）。更为形式化地说，$\\delta$ 的定义是 $Q\\times \\Sigma_{\\epsilon}\\times \\Gamma_{\\epsilon}\\to Q\\times \\Gamma_{\\epsilon}$​（输入栈顶即将被替换的那个字符，输出新的栈顶）。\n\n<!-- more -->\n\n我们称字符串 $w$ 可以被这个 `PDA` 识别，当且仅当存在一系列状态 $s_0, \\cdots, s_m$ 以及栈构成的字符串 $t_0, \\cdots, t_m$，使得\n\n- $s_0 = q_0, t_0=\\epsilon$：一开始在起始节点；栈是空的\n- 对于每个 $i= 0, 1, \\cdots, m-1$，存在 $a, b\\in \\Gamma_{\\epsilon}$，以及 $r\\in \\Gamma^*$ 使得 $t_i=ar, t_{i +1}=br$。且 $(s_{i+1}, b)\\in\\delta(s_i, w_{i+1},a)$。注意 $a, b$ 可以是空的，这就完成了对栈的操作。\n- $s_m\\in F$​，即必须在接受节点结束。\n\n## Context-free Grammar\n\n所谓上下文无关语法就是“只能通过一定规则生成”的语法。它的形式化定义由四元组 $(V,\\Sigma,R,S)$ 构成，其中：\n\n- $V$ 表示变量集合。所谓“变量”，在这里指的是满足特定规则的某个字符串（可以看作里面存的就是一个字符串，但是必须满足某些限制）\n- $\\Sigma$ 表示字符集合，它规定了字符串中可能出现的所有字符。\n- $R$ 是规则集合，它规定了 $V$ 中变量必须服从的规则，每条规则会将一个 $V$ 中的变量和一个包含变量以及字符的字符串结合起来。或者它也可以看作若干条“文本替换规则”，即每次将当前字符串中的一个变量替换为另一个字符串（可能包含变量）。\n- $S\\in V$ 表示起始变量。\n\n我们称字符串 $w$ 能被此语法生成，当且仅当从 $S$ 能导出字符串 $w$。举个例子，考虑下面的上下文无关语法：\n$$\nG=(\\\\{S\\\\}, \\\\{a, b\\\\}, R,S)\\\\\\\\\\quad R: S\\to aSb\\ |\\ SS\\ |\\ \\epsilon\n$$\n 它能生成 `ab`，`abab`，`aabbab` 等等字符串。\n\n## Corelation\n\n事实上，**下推自动机和上下文无关语法是等价的**。即：任意下推自动机能表示的语言都能通过某种上下文无关语法生成，任意上下文无关语法都能对应一个下推自动机。证明由两个方向进行：\n\n<article class=\"message is-primary message-immersive\">\n  <div class=\"message-body\">\n\t1. 任意上下文无关语法都对应一个下推自动机。<br>\n\t2. 任意下推自动机都对应一个上下文无关语法。\n  </div>\n</article>\n\n\n可以发现，`1`  是较容易证明的。构造自动机的思路是，先让自动机不接受任何输入，生成所有可能的字符串堆在栈里（即每一种在自动机上的走法结束后，栈中留下的都是一种可能的字符串）。然后自动机开始接受字符串，将其与当前栈顶比较，只有二者完全相同才弹出栈。\n\n比如上面的那个例子，对于它我们可以构造出如下自动机：用 $x, y \\to z$ 表示接受字符 $x$，取出栈顶并确认其为 $y$，向栈压入 $z$。\n\n- 起始节点 $q_0$，向节点 $q_1$ 连边 $\\epsilon, \\epsilon\\to \\text{\\\\$}$，意思是往当前栈中压入一个特殊字符用于判断栈是否为空。\n- 节点 $q_1$ 向节点 $q_{loop}$ 连边 $\\epsilon, \\epsilon \\to S$，这是因为起始字符是 $S$，意思是让当前字符串有一个字符 $S$。\n- $q_{loop}$ 的连边有两种：\n  1. 如果栈顶和接受字符串的第一个字符相同，那么弹出栈顶，对应向自己的连边 $a, a\\to \\epsilon $ 以及 $b, b\\to \\epsilon$。\n  2. 应用一条规则。比如规则 $S\\to aSb$，如果栈顶为 $S$，则弹出栈顶，并相继压入 `b`，$S$​，`a`。\n- $q_{loop}$ 向接受节点 $q_{accept}$ 连边，弹出特殊字符用来确保当前栈为空。\n\n下图是规则 $S\\to aTb|b, T\\to Ta|\\epsilon$ 的例子。\n\n![](https://pic1.zhimg.com/80/v2-b4b8a7bd0ed1cbaa1e55b9b518d4ea1c_1440w.webp)\n\n接下来我们讨论关于 `2` 的证明。不妨假设这个自动机有 $k$ 个节点，我们生成 $k^2$ 个变量 $A_{pq}$，这里 $p,q$ 都是节点的编号，它用于表示所有从 $p$ 出发，并且出发时栈为空，能够到达 $q$ 且此时栈为空的字符串。那么，我们可以对其生成两种类型的规则。\n\n1. 存在一个中间节点 $r$，使得自动机运行到节点 $r$ 时栈为空，那么根据定义可以构造出一条语法 $A_{pq}=A_{pr}A_{rq}$。\n2. 如果存在字符串 $w$ 能从 $p$ 走到 $q$，拿出 $w$ 的第一个字符 $a$ 以及最后一个字符 $b$，并且记录下 $w$ 第一步走到的节点 $r$ 以及到达 $q$ 之前的节点 $s$，生成语法 $A_{pq}=aA_{rs}b$。由于 $\\Sigma, Q$ 都是有限的，因此这样生成的规则也只有有限多条。\n\n通过对字符串 $w$ 的长度 $|w|$ 归纳，可以很方便地证明任意能在这个自动机上跑的字符串都能被我们构造出的语法生成。\n\n## 对上下文无关语法的 Pumping Lemma\n\n<article class=\"message is-dark\">\n  <div class=\"message-header\">\n    <p>Pumping Lemma</p>\n  </div>\n  <div class=\"message-body\">\n    若 $A$ 是一种上下文无关语法，则存在一个数 $p$，使得对于 $A$ 能生成的任意字符串 $s$，如果 $|s| \\ge p$，那么 $s$ 可以被划分为 $5$ 个部分 $uvxyz$，使得<br><br>\n    <li>对于任意的 $i\\ge 0$，$uv^ixy^iz\\in A$。</li>\n    <li>$vy$ 不为空。</li>\n    <li>$|vxy|\\le p$。</li>\n  </div>\n</article>\n\n只要 $s$ 足够长，那么生成出 $s$ 这个串对应的树形结构的深度就可以有保证。而这个深度一旦超过了点数，根据抽屉原理其中必然存在两个相同的变量（下图中的 $N$）。将深度更浅的 $N$ 对应的子树复制到深度更深的 $N$ 中，得到的串应当仍然满足上下文无关文法要求。\n\n<center>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Pumping_lemma_for_context-free_languages.svg/1920px-Pumping_lemma_for_context-free_languages.svg.png\" style=\"zoom:20%;\" />\n</center>\n","source":"_posts/Pushdown-Automata-and-Context-free-Grammar.md","raw":"---\ntitle: Pushdown Automata and Context-free Grammar\ndate: 2024-03-15 15:44:44\ntags: [Automata, Theoretical Computer Science (TCS)]\ncategories: \n- [Theoretical Computer Science(TCS), Automata]\n---\n\n## Pushdown Automata\n\n下推自动机可以看作是 `NFA` 加入栈后的拓展版本。与 `NFA` 相比，`PDA` 的定义中多了一个“栈”的概念，一个 `PDA` 由六元组 $(Q, \\Sigma, \\Gamma, \\delta, q_0, F)$ 组成。其中：\n\n-  $Q, \\Sigma, q_0, F$​ 与 `NFA` 的定义完全一致，它们分别表示状态，字符集，起始节点，接受节点集。\n- $\\Gamma$ 是栈字符集，它规定了栈中的每个元素可能是什么。我们常常通过往栈中压入或者弹出一个 `$` 来确保当前栈是空的。\n- $\\delta$ 同样是转移函数，但它与 `NFA` 的区别是引入了栈的状态。$\\delta$ 函数接受当前状态、当前栈顶以及一个字符（当然，可以是空串 $\\epsilon$），它的输出是一个目标节点以及对当前栈的操作（不从栈顶读字符并压入一个字符、弹出一个字符、更改栈顶字符或者保持栈不动）。更为形式化地说，$\\delta$ 的定义是 $Q\\times \\Sigma_{\\epsilon}\\times \\Gamma_{\\epsilon}\\to Q\\times \\Gamma_{\\epsilon}$​（输入栈顶即将被替换的那个字符，输出新的栈顶）。\n\n<!-- more -->\n\n我们称字符串 $w$ 可以被这个 `PDA` 识别，当且仅当存在一系列状态 $s_0, \\cdots, s_m$ 以及栈构成的字符串 $t_0, \\cdots, t_m$，使得\n\n- $s_0 = q_0, t_0=\\epsilon$：一开始在起始节点；栈是空的\n- 对于每个 $i= 0, 1, \\cdots, m-1$，存在 $a, b\\in \\Gamma_{\\epsilon}$，以及 $r\\in \\Gamma^*$ 使得 $t_i=ar, t_{i +1}=br$。且 $(s_{i+1}, b)\\in\\delta(s_i, w_{i+1},a)$。注意 $a, b$ 可以是空的，这就完成了对栈的操作。\n- $s_m\\in F$​，即必须在接受节点结束。\n\n## Context-free Grammar\n\n所谓上下文无关语法就是“只能通过一定规则生成”的语法。它的形式化定义由四元组 $(V,\\Sigma,R,S)$ 构成，其中：\n\n- $V$ 表示变量集合。所谓“变量”，在这里指的是满足特定规则的某个字符串（可以看作里面存的就是一个字符串，但是必须满足某些限制）\n- $\\Sigma$ 表示字符集合，它规定了字符串中可能出现的所有字符。\n- $R$ 是规则集合，它规定了 $V$ 中变量必须服从的规则，每条规则会将一个 $V$ 中的变量和一个包含变量以及字符的字符串结合起来。或者它也可以看作若干条“文本替换规则”，即每次将当前字符串中的一个变量替换为另一个字符串（可能包含变量）。\n- $S\\in V$ 表示起始变量。\n\n我们称字符串 $w$ 能被此语法生成，当且仅当从 $S$ 能导出字符串 $w$。举个例子，考虑下面的上下文无关语法：\n$$\nG=(\\\\{S\\\\}, \\\\{a, b\\\\}, R,S)\\\\\\\\\\quad R: S\\to aSb\\ |\\ SS\\ |\\ \\epsilon\n$$\n 它能生成 `ab`，`abab`，`aabbab` 等等字符串。\n\n## Corelation\n\n事实上，**下推自动机和上下文无关语法是等价的**。即：任意下推自动机能表示的语言都能通过某种上下文无关语法生成，任意上下文无关语法都能对应一个下推自动机。证明由两个方向进行：\n\n<article class=\"message is-primary message-immersive\">\n  <div class=\"message-body\">\n\t1. 任意上下文无关语法都对应一个下推自动机。<br>\n\t2. 任意下推自动机都对应一个上下文无关语法。\n  </div>\n</article>\n\n\n可以发现，`1`  是较容易证明的。构造自动机的思路是，先让自动机不接受任何输入，生成所有可能的字符串堆在栈里（即每一种在自动机上的走法结束后，栈中留下的都是一种可能的字符串）。然后自动机开始接受字符串，将其与当前栈顶比较，只有二者完全相同才弹出栈。\n\n比如上面的那个例子，对于它我们可以构造出如下自动机：用 $x, y \\to z$ 表示接受字符 $x$，取出栈顶并确认其为 $y$，向栈压入 $z$。\n\n- 起始节点 $q_0$，向节点 $q_1$ 连边 $\\epsilon, \\epsilon\\to \\text{\\\\$}$，意思是往当前栈中压入一个特殊字符用于判断栈是否为空。\n- 节点 $q_1$ 向节点 $q_{loop}$ 连边 $\\epsilon, \\epsilon \\to S$，这是因为起始字符是 $S$，意思是让当前字符串有一个字符 $S$。\n- $q_{loop}$ 的连边有两种：\n  1. 如果栈顶和接受字符串的第一个字符相同，那么弹出栈顶，对应向自己的连边 $a, a\\to \\epsilon $ 以及 $b, b\\to \\epsilon$。\n  2. 应用一条规则。比如规则 $S\\to aSb$，如果栈顶为 $S$，则弹出栈顶，并相继压入 `b`，$S$​，`a`。\n- $q_{loop}$ 向接受节点 $q_{accept}$ 连边，弹出特殊字符用来确保当前栈为空。\n\n下图是规则 $S\\to aTb|b, T\\to Ta|\\epsilon$ 的例子。\n\n![](https://pic1.zhimg.com/80/v2-b4b8a7bd0ed1cbaa1e55b9b518d4ea1c_1440w.webp)\n\n接下来我们讨论关于 `2` 的证明。不妨假设这个自动机有 $k$ 个节点，我们生成 $k^2$ 个变量 $A_{pq}$，这里 $p,q$ 都是节点的编号，它用于表示所有从 $p$ 出发，并且出发时栈为空，能够到达 $q$ 且此时栈为空的字符串。那么，我们可以对其生成两种类型的规则。\n\n1. 存在一个中间节点 $r$，使得自动机运行到节点 $r$ 时栈为空，那么根据定义可以构造出一条语法 $A_{pq}=A_{pr}A_{rq}$。\n2. 如果存在字符串 $w$ 能从 $p$ 走到 $q$，拿出 $w$ 的第一个字符 $a$ 以及最后一个字符 $b$，并且记录下 $w$ 第一步走到的节点 $r$ 以及到达 $q$ 之前的节点 $s$，生成语法 $A_{pq}=aA_{rs}b$。由于 $\\Sigma, Q$ 都是有限的，因此这样生成的规则也只有有限多条。\n\n通过对字符串 $w$ 的长度 $|w|$ 归纳，可以很方便地证明任意能在这个自动机上跑的字符串都能被我们构造出的语法生成。\n\n## 对上下文无关语法的 Pumping Lemma\n\n<article class=\"message is-dark\">\n  <div class=\"message-header\">\n    <p>Pumping Lemma</p>\n  </div>\n  <div class=\"message-body\">\n    若 $A$ 是一种上下文无关语法，则存在一个数 $p$，使得对于 $A$ 能生成的任意字符串 $s$，如果 $|s| \\ge p$，那么 $s$ 可以被划分为 $5$ 个部分 $uvxyz$，使得<br><br>\n    <li>对于任意的 $i\\ge 0$，$uv^ixy^iz\\in A$。</li>\n    <li>$vy$ 不为空。</li>\n    <li>$|vxy|\\le p$。</li>\n  </div>\n</article>\n\n只要 $s$ 足够长，那么生成出 $s$ 这个串对应的树形结构的深度就可以有保证。而这个深度一旦超过了点数，根据抽屉原理其中必然存在两个相同的变量（下图中的 $N$）。将深度更浅的 $N$ 对应的子树复制到深度更深的 $N$ 中，得到的串应当仍然满足上下文无关文法要求。\n\n<center>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Pumping_lemma_for_context-free_languages.svg/1920px-Pumping_lemma_for_context-free_languages.svg.png\" style=\"zoom:20%;\" />\n</center>\n","slug":"Pushdown-Automata-and-Context-free-Grammar","published":1,"updated":"2024-03-24T13:08:18.484Z","comments":1,"layout":"post","photos":[],"_id":"clu5mp4rd0002wkfy3l8tclix","content":"<h2 id=\"Pushdown-Automata\"><a href=\"#Pushdown-Automata\" class=\"headerlink\" title=\"Pushdown Automata\"></a>Pushdown Automata</h2><p>下推自动机可以看作是 <code>NFA</code> 加入栈后的拓展版本。与 <code>NFA</code> 相比，<code>PDA</code> 的定义中多了一个“栈”的概念，一个 <code>PDA</code> 由六元组 $(Q, \\Sigma, \\Gamma, \\delta, q_0, F)$ 组成。其中：</p>\n<ul>\n<li>$Q, \\Sigma, q_0, F$​ 与 <code>NFA</code> 的定义完全一致，它们分别表示状态，字符集，起始节点，接受节点集。</li>\n<li>$\\Gamma$ 是栈字符集，它规定了栈中的每个元素可能是什么。我们常常通过往栈中压入或者弹出一个 <code>$</code> 来确保当前栈是空的。</li>\n<li>$\\delta$ 同样是转移函数，但它与 <code>NFA</code> 的区别是引入了栈的状态。$\\delta$ 函数接受当前状态、当前栈顶以及一个字符（当然，可以是空串 $\\epsilon$），它的输出是一个目标节点以及对当前栈的操作（不从栈顶读字符并压入一个字符、弹出一个字符、更改栈顶字符或者保持栈不动）。更为形式化地说，$\\delta$ 的定义是 $Q\\times \\Sigma_{\\epsilon}\\times \\Gamma_{\\epsilon}\\to Q\\times \\Gamma_{\\epsilon}$​（输入栈顶即将被替换的那个字符，输出新的栈顶）。</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>我们称字符串 $w$ 可以被这个 <code>PDA</code> 识别，当且仅当存在一系列状态 $s_0, \\cdots, s_m$ 以及栈构成的字符串 $t_0, \\cdots, t_m$，使得</p>\n<ul>\n<li>$s_0 &#x3D; q_0, t_0&#x3D;\\epsilon$：一开始在起始节点；栈是空的</li>\n<li>对于每个 $i&#x3D; 0, 1, \\cdots, m-1$，存在 $a, b\\in \\Gamma_{\\epsilon}$，以及 $r\\in \\Gamma^*$ 使得 $t_i&#x3D;ar, t_{i +1}&#x3D;br$。且 $(s_{i+1}, b)\\in\\delta(s_i, w_{i+1},a)$。注意 $a, b$ 可以是空的，这就完成了对栈的操作。</li>\n<li>$s_m\\in F$​，即必须在接受节点结束。</li>\n</ul>\n<h2 id=\"Context-free-Grammar\"><a href=\"#Context-free-Grammar\" class=\"headerlink\" title=\"Context-free Grammar\"></a>Context-free Grammar</h2><p>所谓上下文无关语法就是“只能通过一定规则生成”的语法。它的形式化定义由四元组 $(V,\\Sigma,R,S)$ 构成，其中：</p>\n<ul>\n<li>$V$ 表示变量集合。所谓“变量”，在这里指的是满足特定规则的某个字符串（可以看作里面存的就是一个字符串，但是必须满足某些限制）</li>\n<li>$\\Sigma$ 表示字符集合，它规定了字符串中可能出现的所有字符。</li>\n<li>$R$ 是规则集合，它规定了 $V$ 中变量必须服从的规则，每条规则会将一个 $V$ 中的变量和一个包含变量以及字符的字符串结合起来。或者它也可以看作若干条“文本替换规则”，即每次将当前字符串中的一个变量替换为另一个字符串（可能包含变量）。</li>\n<li>$S\\in V$ 表示起始变量。</li>\n</ul>\n<p>我们称字符串 $w$ 能被此语法生成，当且仅当从 $S$ 能导出字符串 $w$。举个例子，考虑下面的上下文无关语法：<br>$$<br>G&#x3D;(\\{S\\}, \\{a, b\\}, R,S)\\\\\\quad R: S\\to aSb\\ |\\ SS\\ |\\ \\epsilon<br>$$<br> 它能生成 <code>ab</code>，<code>abab</code>，<code>aabbab</code> 等等字符串。</p>\n<h2 id=\"Corelation\"><a href=\"#Corelation\" class=\"headerlink\" title=\"Corelation\"></a>Corelation</h2><p>事实上，<strong>下推自动机和上下文无关语法是等价的</strong>。即：任意下推自动机能表示的语言都能通过某种上下文无关语法生成，任意上下文无关语法都能对应一个下推自动机。证明由两个方向进行：</p>\n<article class=\"message is-primary message-immersive\">\n  <div class=\"message-body\">\n    1. 任意上下文无关语法都对应一个下推自动机。<br>\n    2. 任意下推自动机都对应一个上下文无关语法。\n  </div>\n</article>\n\n\n<p>可以发现，<code>1</code>  是较容易证明的。构造自动机的思路是，先让自动机不接受任何输入，生成所有可能的字符串堆在栈里（即每一种在自动机上的走法结束后，栈中留下的都是一种可能的字符串）。然后自动机开始接受字符串，将其与当前栈顶比较，只有二者完全相同才弹出栈。</p>\n<p>比如上面的那个例子，对于它我们可以构造出如下自动机：用 $x, y \\to z$ 表示接受字符 $x$，取出栈顶并确认其为 $y$，向栈压入 $z$。</p>\n<ul>\n<li>起始节点 $q_0$，向节点 $q_1$ 连边 $\\epsilon, \\epsilon\\to \\text{\\$}$，意思是往当前栈中压入一个特殊字符用于判断栈是否为空。</li>\n<li>节点 $q_1$ 向节点 $q_{loop}$ 连边 $\\epsilon, \\epsilon \\to S$，这是因为起始字符是 $S$，意思是让当前字符串有一个字符 $S$。</li>\n<li>$q_{loop}$ 的连边有两种：<ol>\n<li>如果栈顶和接受字符串的第一个字符相同，那么弹出栈顶，对应向自己的连边 $a, a\\to \\epsilon $ 以及 $b, b\\to \\epsilon$。</li>\n<li>应用一条规则。比如规则 $S\\to aSb$，如果栈顶为 $S$，则弹出栈顶，并相继压入 <code>b</code>，$S$​，<code>a</code>。</li>\n</ol>\n</li>\n<li>$q_{loop}$ 向接受节点 $q_{accept}$ 连边，弹出特殊字符用来确保当前栈为空。</li>\n</ul>\n<p>下图是规则 $S\\to aTb|b, T\\to Ta|\\epsilon$ 的例子。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-b4b8a7bd0ed1cbaa1e55b9b518d4ea1c_1440w.webp\"></p>\n<p>接下来我们讨论关于 <code>2</code> 的证明。不妨假设这个自动机有 $k$ 个节点，我们生成 $k^2$ 个变量 $A_{pq}$，这里 $p,q$ 都是节点的编号，它用于表示所有从 $p$ 出发，并且出发时栈为空，能够到达 $q$ 且此时栈为空的字符串。那么，我们可以对其生成两种类型的规则。</p>\n<ol>\n<li>存在一个中间节点 $r$，使得自动机运行到节点 $r$ 时栈为空，那么根据定义可以构造出一条语法 $A_{pq}&#x3D;A_{pr}A_{rq}$。</li>\n<li>如果存在字符串 $w$ 能从 $p$ 走到 $q$，拿出 $w$ 的第一个字符 $a$ 以及最后一个字符 $b$，并且记录下 $w$ 第一步走到的节点 $r$ 以及到达 $q$ 之前的节点 $s$，生成语法 $A_{pq}&#x3D;aA_{rs}b$。由于 $\\Sigma, Q$ 都是有限的，因此这样生成的规则也只有有限多条。</li>\n</ol>\n<p>通过对字符串 $w$ 的长度 $|w|$ 归纳，可以很方便地证明任意能在这个自动机上跑的字符串都能被我们构造出的语法生成。</p>\n<h2 id=\"对上下文无关语法的-Pumping-Lemma\"><a href=\"#对上下文无关语法的-Pumping-Lemma\" class=\"headerlink\" title=\"对上下文无关语法的 Pumping Lemma\"></a>对上下文无关语法的 Pumping Lemma</h2><article class=\"message is-dark\">\n  <div class=\"message-header\">\n    <p>Pumping Lemma</p>\n  </div>\n  <div class=\"message-body\">\n    若 $A$ 是一种上下文无关语法，则存在一个数 $p$，使得对于 $A$ 能生成的任意字符串 $s$，如果 $|s| \\ge p$，那么 $s$ 可以被划分为 $5$ 个部分 $uvxyz$，使得<br><br>\n    <li>对于任意的 $i\\ge 0$，$uv^ixy^iz\\in A$。</li>\n    <li>$vy$ 不为空。</li>\n    <li>$|vxy|\\le p$。</li>\n  </div>\n</article>\n\n<p>只要 $s$ 足够长，那么生成出 $s$ 这个串对应的树形结构的深度就可以有保证。而这个深度一旦超过了点数，根据抽屉原理其中必然存在两个相同的变量（下图中的 $N$）。将深度更浅的 $N$ 对应的子树复制到深度更深的 $N$ 中，得到的串应当仍然满足上下文无关文法要求。</p>\n<center>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Pumping_lemma_for_context-free_languages.svg/1920px-Pumping_lemma_for_context-free_languages.svg.png\" style=\"zoom:20%;\" />\n</center>\n","excerpt":"<h2 id=\"Pushdown-Automata\"><a href=\"#Pushdown-Automata\" class=\"headerlink\" title=\"Pushdown Automata\"></a>Pushdown Automata</h2><p>下推自动机可以看作是 <code>NFA</code> 加入栈后的拓展版本。与 <code>NFA</code> 相比，<code>PDA</code> 的定义中多了一个“栈”的概念，一个 <code>PDA</code> 由六元组 $(Q, \\Sigma, \\Gamma, \\delta, q_0, F)$ 组成。其中：</p>\n<ul>\n<li>$Q, \\Sigma, q_0, F$​ 与 <code>NFA</code> 的定义完全一致，它们分别表示状态，字符集，起始节点，接受节点集。</li>\n<li>$\\Gamma$ 是栈字符集，它规定了栈中的每个元素可能是什么。我们常常通过往栈中压入或者弹出一个 <code>$</code> 来确保当前栈是空的。</li>\n<li>$\\delta$ 同样是转移函数，但它与 <code>NFA</code> 的区别是引入了栈的状态。$\\delta$ 函数接受当前状态、当前栈顶以及一个字符（当然，可以是空串 $\\epsilon$），它的输出是一个目标节点以及对当前栈的操作（不从栈顶读字符并压入一个字符、弹出一个字符、更改栈顶字符或者保持栈不动）。更为形式化地说，$\\delta$ 的定义是 $Q\\times \\Sigma_{\\epsilon}\\times \\Gamma_{\\epsilon}\\to Q\\times \\Gamma_{\\epsilon}$​（输入栈顶即将被替换的那个字符，输出新的栈顶）。</li>\n</ul>","more":"<p>我们称字符串 $w$ 可以被这个 <code>PDA</code> 识别，当且仅当存在一系列状态 $s_0, \\cdots, s_m$ 以及栈构成的字符串 $t_0, \\cdots, t_m$，使得</p>\n<ul>\n<li>$s_0 &#x3D; q_0, t_0&#x3D;\\epsilon$：一开始在起始节点；栈是空的</li>\n<li>对于每个 $i&#x3D; 0, 1, \\cdots, m-1$，存在 $a, b\\in \\Gamma_{\\epsilon}$，以及 $r\\in \\Gamma^*$ 使得 $t_i&#x3D;ar, t_{i +1}&#x3D;br$。且 $(s_{i+1}, b)\\in\\delta(s_i, w_{i+1},a)$。注意 $a, b$ 可以是空的，这就完成了对栈的操作。</li>\n<li>$s_m\\in F$​，即必须在接受节点结束。</li>\n</ul>\n<h2 id=\"Context-free-Grammar\"><a href=\"#Context-free-Grammar\" class=\"headerlink\" title=\"Context-free Grammar\"></a>Context-free Grammar</h2><p>所谓上下文无关语法就是“只能通过一定规则生成”的语法。它的形式化定义由四元组 $(V,\\Sigma,R,S)$ 构成，其中：</p>\n<ul>\n<li>$V$ 表示变量集合。所谓“变量”，在这里指的是满足特定规则的某个字符串（可以看作里面存的就是一个字符串，但是必须满足某些限制）</li>\n<li>$\\Sigma$ 表示字符集合，它规定了字符串中可能出现的所有字符。</li>\n<li>$R$ 是规则集合，它规定了 $V$ 中变量必须服从的规则，每条规则会将一个 $V$ 中的变量和一个包含变量以及字符的字符串结合起来。或者它也可以看作若干条“文本替换规则”，即每次将当前字符串中的一个变量替换为另一个字符串（可能包含变量）。</li>\n<li>$S\\in V$ 表示起始变量。</li>\n</ul>\n<p>我们称字符串 $w$ 能被此语法生成，当且仅当从 $S$ 能导出字符串 $w$。举个例子，考虑下面的上下文无关语法：<br>$$<br>G&#x3D;(\\{S\\}, \\{a, b\\}, R,S)\\\\\\quad R: S\\to aSb\\ |\\ SS\\ |\\ \\epsilon<br>$$<br> 它能生成 <code>ab</code>，<code>abab</code>，<code>aabbab</code> 等等字符串。</p>\n<h2 id=\"Corelation\"><a href=\"#Corelation\" class=\"headerlink\" title=\"Corelation\"></a>Corelation</h2><p>事实上，<strong>下推自动机和上下文无关语法是等价的</strong>。即：任意下推自动机能表示的语言都能通过某种上下文无关语法生成，任意上下文无关语法都能对应一个下推自动机。证明由两个方向进行：</p>\n<article class=\"message is-primary message-immersive\">\n  <div class=\"message-body\">\n    1. 任意上下文无关语法都对应一个下推自动机。<br>\n    2. 任意下推自动机都对应一个上下文无关语法。\n  </div>\n</article>\n\n\n<p>可以发现，<code>1</code>  是较容易证明的。构造自动机的思路是，先让自动机不接受任何输入，生成所有可能的字符串堆在栈里（即每一种在自动机上的走法结束后，栈中留下的都是一种可能的字符串）。然后自动机开始接受字符串，将其与当前栈顶比较，只有二者完全相同才弹出栈。</p>\n<p>比如上面的那个例子，对于它我们可以构造出如下自动机：用 $x, y \\to z$ 表示接受字符 $x$，取出栈顶并确认其为 $y$，向栈压入 $z$。</p>\n<ul>\n<li>起始节点 $q_0$，向节点 $q_1$ 连边 $\\epsilon, \\epsilon\\to \\text{\\$}$，意思是往当前栈中压入一个特殊字符用于判断栈是否为空。</li>\n<li>节点 $q_1$ 向节点 $q_{loop}$ 连边 $\\epsilon, \\epsilon \\to S$，这是因为起始字符是 $S$，意思是让当前字符串有一个字符 $S$。</li>\n<li>$q_{loop}$ 的连边有两种：<ol>\n<li>如果栈顶和接受字符串的第一个字符相同，那么弹出栈顶，对应向自己的连边 $a, a\\to \\epsilon $ 以及 $b, b\\to \\epsilon$。</li>\n<li>应用一条规则。比如规则 $S\\to aSb$，如果栈顶为 $S$，则弹出栈顶，并相继压入 <code>b</code>，$S$​，<code>a</code>。</li>\n</ol>\n</li>\n<li>$q_{loop}$ 向接受节点 $q_{accept}$ 连边，弹出特殊字符用来确保当前栈为空。</li>\n</ul>\n<p>下图是规则 $S\\to aTb|b, T\\to Ta|\\epsilon$ 的例子。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-b4b8a7bd0ed1cbaa1e55b9b518d4ea1c_1440w.webp\"></p>\n<p>接下来我们讨论关于 <code>2</code> 的证明。不妨假设这个自动机有 $k$ 个节点，我们生成 $k^2$ 个变量 $A_{pq}$，这里 $p,q$ 都是节点的编号，它用于表示所有从 $p$ 出发，并且出发时栈为空，能够到达 $q$ 且此时栈为空的字符串。那么，我们可以对其生成两种类型的规则。</p>\n<ol>\n<li>存在一个中间节点 $r$，使得自动机运行到节点 $r$ 时栈为空，那么根据定义可以构造出一条语法 $A_{pq}&#x3D;A_{pr}A_{rq}$。</li>\n<li>如果存在字符串 $w$ 能从 $p$ 走到 $q$，拿出 $w$ 的第一个字符 $a$ 以及最后一个字符 $b$，并且记录下 $w$ 第一步走到的节点 $r$ 以及到达 $q$ 之前的节点 $s$，生成语法 $A_{pq}&#x3D;aA_{rs}b$。由于 $\\Sigma, Q$ 都是有限的，因此这样生成的规则也只有有限多条。</li>\n</ol>\n<p>通过对字符串 $w$ 的长度 $|w|$ 归纳，可以很方便地证明任意能在这个自动机上跑的字符串都能被我们构造出的语法生成。</p>\n<h2 id=\"对上下文无关语法的-Pumping-Lemma\"><a href=\"#对上下文无关语法的-Pumping-Lemma\" class=\"headerlink\" title=\"对上下文无关语法的 Pumping Lemma\"></a>对上下文无关语法的 Pumping Lemma</h2><article class=\"message is-dark\">\n  <div class=\"message-header\">\n    <p>Pumping Lemma</p>\n  </div>\n  <div class=\"message-body\">\n    若 $A$ 是一种上下文无关语法，则存在一个数 $p$，使得对于 $A$ 能生成的任意字符串 $s$，如果 $|s| \\ge p$，那么 $s$ 可以被划分为 $5$ 个部分 $uvxyz$，使得<br><br>\n    <li>对于任意的 $i\\ge 0$，$uv^ixy^iz\\in A$。</li>\n    <li>$vy$ 不为空。</li>\n    <li>$|vxy|\\le p$。</li>\n  </div>\n</article>\n\n<p>只要 $s$ 足够长，那么生成出 $s$ 这个串对应的树形结构的深度就可以有保证。而这个深度一旦超过了点数，根据抽屉原理其中必然存在两个相同的变量（下图中的 $N$）。将深度更浅的 $N$ 对应的子树复制到深度更深的 $N$ 中，得到的串应当仍然满足上下文无关文法要求。</p>\n<center>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Pumping_lemma_for_context-free_languages.svg/1920px-Pumping_lemma_for_context-free_languages.svg.png\" style=\"zoom:20%;\" />\n</center>"},{"title":"Some warm tips","date":"2024-03-14T15:42:50.000Z","_content":"\n其实主要是一些页面元素的备忘录，我太容易搞忘了 0. 0\n\n这个主题好像是支持 [Bulma](https://bulma.io/documentation/overview) 的，也就是说可以直接向 `.md` 文件里面插入它支持的 `html` 元素。\n\n## 分栏显示\n\n<div class=\"columns\">\n  <div class=\"column\">\n    <article class=\"message is-primary\">\n      <div class=\"message-header\">\n        <p>这里是第一列</p>\n      </div>\n      <div class=\"message-body\">\n      \t这里有一些内容\n      </div>\n    </article>\n  </div>\n  <div class=\"column\">\n    {% codeblock \"html code\" lang:html >folded %}\n    <div class=\"columns\">\n      <div class=\"column\">\n        <article class=\"message is-primary\">\n          <div class=\"message-header\">\n            <p>这里是第一列</p>\n          </div>\n          <div class=\"message-body\">\n            这里有一些内容\n          </div>\n        </article>\n      </div>\n      <div class=\"column\">\n        哇，这里能递归吗\n      </div>\n    </div>\n    {% endcodeblock %}\n  </div>\n</div>\n\n<!-- more -->\n\n## message\n\n`message` 一共有 $7$ 种，它们分别是 `dark`, `primary`, `link`, `info`, `success`, `warning` 以及 `danger`。值得一提的是可以在 `class` 内加入 `message-immersive`，它会变得非常帅，比如这样\n\n<article class=\"message message-immersive is-primary\">\n  <div class=\"message-body\">\n    此处的代码为\n    ```html\n    <article class=\"message message-immersive is-primary\">\n      <div class=\"message-body\">\n        此处的代码为...\n      </div>\n    </article>\n    ```\n  </div>\n</article>\n\n## 小标签页\n\n<div class=\"tabs is-left is-boxed is-fullwidth\">\n  <ul class=\"mx-0 my-0\">\n    <li class=\"is-active\"><a href=\"#first\">第一个</a></li>\n    <li><a href=\"#second\">第二个</a></li>\n  </ul>\n</div>\n<div id=\"first\" class=\"tab-content\">我在第一个标签页里</div>\n<div id=\"second\" class=\"tab-content is-hidden\">我在第二个标签页里</div>\n\n```html\n<div class=\"tabs is-boxed is-fullwidth\">\n  <ul class=\"mx-0 my-0\">\n    <li class=\"is-active\"><a href=\"#first\">第一个</a></li>\n    <li><a href=\"#second\">第二个</a></li>\n  </ul>\n</div>\n<div id=\"first\" class=\"tab-content\">我在第一个标签页里</div>\n<div id=\"second\" class=\"tab-content is-hidden\">我在第二个标签页里</div>\n```\n\n## 代码样式\n\n可以分别制定每个代码块是否折叠，方式是采用 `hexo` 提供的内嵌代码，它长这样\n\n```\n{% codeblock \"optional file name\" lang:code_language_name >folded %}\n...code block content...\n{% endcodeblock %}\n```\n\n## 插入图片\n\n在文件中加入如下代码\n\n```\n{% asset_img image.jpg 200 400 This is an image %}\n```\n\n其中 `200 400` 的作用是限制图片大小。\n\n\n\n","source":"_posts/Reminder.md","raw":"---\ntitle: Some warm tips\ndate: 2024-03-14 23:42:50\ncategories: Configuration\n---\n\n其实主要是一些页面元素的备忘录，我太容易搞忘了 0. 0\n\n这个主题好像是支持 [Bulma](https://bulma.io/documentation/overview) 的，也就是说可以直接向 `.md` 文件里面插入它支持的 `html` 元素。\n\n## 分栏显示\n\n<div class=\"columns\">\n  <div class=\"column\">\n    <article class=\"message is-primary\">\n      <div class=\"message-header\">\n        <p>这里是第一列</p>\n      </div>\n      <div class=\"message-body\">\n      \t这里有一些内容\n      </div>\n    </article>\n  </div>\n  <div class=\"column\">\n    {% codeblock \"html code\" lang:html >folded %}\n    <div class=\"columns\">\n      <div class=\"column\">\n        <article class=\"message is-primary\">\n          <div class=\"message-header\">\n            <p>这里是第一列</p>\n          </div>\n          <div class=\"message-body\">\n            这里有一些内容\n          </div>\n        </article>\n      </div>\n      <div class=\"column\">\n        哇，这里能递归吗\n      </div>\n    </div>\n    {% endcodeblock %}\n  </div>\n</div>\n\n<!-- more -->\n\n## message\n\n`message` 一共有 $7$ 种，它们分别是 `dark`, `primary`, `link`, `info`, `success`, `warning` 以及 `danger`。值得一提的是可以在 `class` 内加入 `message-immersive`，它会变得非常帅，比如这样\n\n<article class=\"message message-immersive is-primary\">\n  <div class=\"message-body\">\n    此处的代码为\n    ```html\n    <article class=\"message message-immersive is-primary\">\n      <div class=\"message-body\">\n        此处的代码为...\n      </div>\n    </article>\n    ```\n  </div>\n</article>\n\n## 小标签页\n\n<div class=\"tabs is-left is-boxed is-fullwidth\">\n  <ul class=\"mx-0 my-0\">\n    <li class=\"is-active\"><a href=\"#first\">第一个</a></li>\n    <li><a href=\"#second\">第二个</a></li>\n  </ul>\n</div>\n<div id=\"first\" class=\"tab-content\">我在第一个标签页里</div>\n<div id=\"second\" class=\"tab-content is-hidden\">我在第二个标签页里</div>\n\n```html\n<div class=\"tabs is-boxed is-fullwidth\">\n  <ul class=\"mx-0 my-0\">\n    <li class=\"is-active\"><a href=\"#first\">第一个</a></li>\n    <li><a href=\"#second\">第二个</a></li>\n  </ul>\n</div>\n<div id=\"first\" class=\"tab-content\">我在第一个标签页里</div>\n<div id=\"second\" class=\"tab-content is-hidden\">我在第二个标签页里</div>\n```\n\n## 代码样式\n\n可以分别制定每个代码块是否折叠，方式是采用 `hexo` 提供的内嵌代码，它长这样\n\n```\n{% codeblock \"optional file name\" lang:code_language_name >folded %}\n...code block content...\n{% endcodeblock %}\n```\n\n## 插入图片\n\n在文件中加入如下代码\n\n```\n{% asset_img image.jpg 200 400 This is an image %}\n```\n\n其中 `200 400` 的作用是限制图片大小。\n\n\n\n","slug":"Reminder","published":1,"updated":"2024-03-24T11:57:34.039Z","comments":1,"layout":"post","photos":[],"_id":"clu5mp4re0003wkfy2qd1aupb","content":"<p>其实主要是一些页面元素的备忘录，我太容易搞忘了 0. 0</p>\n<p>这个主题好像是支持 <a href=\"https://bulma.io/documentation/overview\">Bulma</a> 的，也就是说可以直接向 <code>.md</code> 文件里面插入它支持的 <code>html</code> 元素。</p>\n<h2 id=\"分栏显示\"><a href=\"#分栏显示\" class=\"headerlink\" title=\"分栏显示\"></a>分栏显示</h2><div class=\"columns\">\n  <div class=\"column\">\n    <article class=\"message is-primary\">\n      <div class=\"message-header\">\n        <p>这里是第一列</p>\n      </div>\n      <div class=\"message-body\">\n          这里有一些内容\n      </div>\n    </article>\n  </div>\n  <div class=\"column\">\n    <figure class=\"highlight html\"><figcaption><span>html code >folded</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;columns&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;column&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message is-primary&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message-header&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这里是第一列<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message-body&quot;</span>&gt;</span></span><br><span class=\"line\">        这里有一些内容</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;column&quot;</span>&gt;</span></span><br><span class=\"line\">    哇，这里能递归吗</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n  </div>\n</div>\n\n<span id=\"more\"></span>\n\n<h2 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h2><p><code>message</code> 一共有 $7$ 种，它们分别是 <code>dark</code>, <code>primary</code>, <code>link</code>, <code>info</code>, <code>success</code>, <code>warning</code> 以及 <code>danger</code>。值得一提的是可以在 <code>class</code> 内加入 <code>message-immersive</code>，它会变得非常帅，比如这样</p>\n<article class=\"message message-immersive is-primary\">\n  <div class=\"message-body\">\n    此处的代码为\n    <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message message-immersive is-primary&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message-body&quot;</span>&gt;</span></span><br><span class=\"line\">    此处的代码为...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n  </div>\n</article>\n\n<h2 id=\"小标签页\"><a href=\"#小标签页\" class=\"headerlink\" title=\"小标签页\"></a>小标签页</h2><div class=\"tabs is-left is-boxed is-fullwidth\">\n  <ul class=\"mx-0 my-0\">\n    <li class=\"is-active\"><a href=\"#first\">第一个</a></li>\n    <li><a href=\"#second\">第二个</a></li>\n  </ul>\n</div>\n<div id=\"first\" class=\"tab-content\">我在第一个标签页里</div>\n<div id=\"second\" class=\"tab-content is-hidden\">我在第二个标签页里</div>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tabs is-boxed is-fullwidth&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mx-0 my-0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;is-active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#first&quot;</span>&gt;</span>第一个<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#second&quot;</span>&gt;</span>第二个<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content&quot;</span>&gt;</span>我在第一个标签页里<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;second&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content is-hidden&quot;</span>&gt;</span>我在第二个标签页里<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码样式\"><a href=\"#代码样式\" class=\"headerlink\" title=\"代码样式\"></a>代码样式</h2><p>可以分别制定每个代码块是否折叠，方式是采用 <code>hexo</code> 提供的内嵌代码，它长这样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock &quot;optional file name&quot; lang:code_language_name &gt;folded %&#125;</span><br><span class=\"line\">...code block content...</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h2><p>在文件中加入如下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img image.jpg 200 400 This is an image %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>200 400</code> 的作用是限制图片大小。</p>\n","excerpt":"<p>其实主要是一些页面元素的备忘录，我太容易搞忘了 0. 0</p>\n<p>这个主题好像是支持 <a href=\"https://bulma.io/documentation/overview\">Bulma</a> 的，也就是说可以直接向 <code>.md</code> 文件里面插入它支持的 <code>html</code> 元素。</p>\n<h2 id=\"分栏显示\"><a href=\"#分栏显示\" class=\"headerlink\" title=\"分栏显示\"></a>分栏显示</h2><div class=\"columns\">\n  <div class=\"column\">\n    <article class=\"message is-primary\">\n      <div class=\"message-header\">\n        <p>这里是第一列</p>\n      </div>\n      <div class=\"message-body\">\n          这里有一些内容\n      </div>\n    </article>\n  </div>\n  <div class=\"column\">\n    <figure class=\"highlight html\"><figcaption><span>html code >folded</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;columns&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;column&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message is-primary&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message-header&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这里是第一列<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message-body&quot;</span>&gt;</span></span><br><span class=\"line\">        这里有一些内容</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;column&quot;</span>&gt;</span></span><br><span class=\"line\">    哇，这里能递归吗</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n  </div>\n</div>","more":"<h2 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h2><p><code>message</code> 一共有 $7$ 种，它们分别是 <code>dark</code>, <code>primary</code>, <code>link</code>, <code>info</code>, <code>success</code>, <code>warning</code> 以及 <code>danger</code>。值得一提的是可以在 <code>class</code> 内加入 <code>message-immersive</code>，它会变得非常帅，比如这样</p>\n<article class=\"message message-immersive is-primary\">\n  <div class=\"message-body\">\n    此处的代码为\n    <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message message-immersive is-primary&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message-body&quot;</span>&gt;</span></span><br><span class=\"line\">    此处的代码为...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n  </div>\n</article>\n\n<h2 id=\"小标签页\"><a href=\"#小标签页\" class=\"headerlink\" title=\"小标签页\"></a>小标签页</h2><div class=\"tabs is-left is-boxed is-fullwidth\">\n  <ul class=\"mx-0 my-0\">\n    <li class=\"is-active\"><a href=\"#first\">第一个</a></li>\n    <li><a href=\"#second\">第二个</a></li>\n  </ul>\n</div>\n<div id=\"first\" class=\"tab-content\">我在第一个标签页里</div>\n<div id=\"second\" class=\"tab-content is-hidden\">我在第二个标签页里</div>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tabs is-boxed is-fullwidth&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mx-0 my-0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;is-active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#first&quot;</span>&gt;</span>第一个<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#second&quot;</span>&gt;</span>第二个<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;first&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content&quot;</span>&gt;</span>我在第一个标签页里<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;second&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content is-hidden&quot;</span>&gt;</span>我在第二个标签页里<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码样式\"><a href=\"#代码样式\" class=\"headerlink\" title=\"代码样式\"></a>代码样式</h2><p>可以分别制定每个代码块是否折叠，方式是采用 <code>hexo</code> 提供的内嵌代码，它长这样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock &quot;optional file name&quot; lang:code_language_name &gt;folded %&#125;</span><br><span class=\"line\">...code block content...</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h2><p>在文件中加入如下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img image.jpg 200 400 This is an image %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>200 400</code> 的作用是限制图片大小。</p>"},{"title":"Tacos lab1 directions","date":"2024-03-18T02:47:11.000Z","_content":"\n## 一点碎碎念\n\n操作系统的 `lab` 相比于 ics 的 `lab` 难度明显上了一个档次，里面可能踩的坑实在是太多了！！而且对于新编写出的 `rust` 版本的操作系统，没有前人的足迹可以追寻，在写的时候也可能出现各种各样莫名其妙的问题。这篇文章权当一个小小的指北吧。我只会列出每个任务的设计思路。\n\n首先我想列出在写这个 `lab` 之前，我们应该达成的几点“共识”（要不然这 `lab` 没法写了）\n\n- 多线程中常用 `Mutex<>` 来确保对关键数据访问的独一性。它有一个优点是不需要 `Mutex` 本身可变就可以修改里面的数据，同时可以很安全地被多个线程访问。\n\n- `std` 是没法用的，但是 `rust` 很贴心地帮我们在 `alloc` 里面实现了很多有用的工具，比如 `Vec, BinaryHeap, BTreeMap` 等等。需要注意的是 `rust` 中没有与 `multiset` 类似的数据结构。 \n\n- 在这个 `lab` 中，我们只需要考虑单核 `cpu` 的情况。虽然整个系统看上去很多很多部分都是并行的，但实际上这些代码在某个时刻只会有一行正在被执行。\n\n- 这个 `lab` 的核心是维护不同线程的切换，线程的切换涉及以下几种情况：\n  1. 主动调用了 `schedule` 函数：将当前线程放回 `ready` 线程列表中，切换上下文，将执行权交给下一个线程。\n  2. 一个线程被唤醒了，且它比当前正在运行的线程具有更高的优先级。\n  3. 程序主动更改了一个线程的优先级（注意：这个线程一定是当前正在运行的线程！这个 `lab` 里面不需要实现更改其它线程的优先级），并且使得处于 `ready` 列表的线程中，存在一个线程的优先级更高。\n  4. 一个线程请求了一个未被释放的锁。\n  5. `time interrupt`。在内核中有一个计时器与一个切换阈值，如果距离上次切换的时间长于这个阈值，那么操作系统会触发一次 `time interrupt` 陷阱。如果不关闭 `time interrupt`，这个陷阱内会执行一次 `schedule`。因此如果要从系统层面上确保当前操作是原子的，需要关闭 `time interrupt`（关上这个之后甚至连 `tick` 都不会调用）。每个线程都有自己独立的 `time interrupt` 状态。在多核 `cpu` 上频繁地关 `interrupt` 不是一个好习惯，因为所有 `cpu` 都会停下，效率很低。不过我们只需要考虑单核的情况，因此该关还是关吧。\n  \n- 关于 `CondVar`：在使用互斥锁的场景下，如果我们手持一个锁，但同时又想要等待另外一个锁被释放，此时有两种想法：\n\n  - 不释放当前手持的锁，等待被释放的锁。好处是不会产生数据竞争，但是此时任何其他需要第一个锁的线程都会被阻塞，这样效率不高。\n  - 释放当前手持的锁，等待被释放的锁。这样做有一定风险：等待此线程持有的锁的那些线程有可能会在中间插入，从而导致数据竞争。\n\n  `CondVar` 就是专门针对这样的场景设计的工具，核心部分由三个函数组成：\n\n  1. `wait(cond, guard)` 这里 `cond` 是条件变量，`guard` 是锁，且必须处于持有状态。这个函数可以理解为“释放锁 `guard`，等待条件变量 `cond` 被触发，再重新获取锁 `guard`” 的原子过程，尽管其内部实现并不是原子的。\n  2. `notify_one(cond)` 通知一个等待这个条件变量触发的线程。如果没有线程在等待，那么这次触发将会被丢失。\n  3. `notify_all(cond)` 通知所有正在等待这个变量触发的线程。 \n\n<!-- more -->\n\n可以说从头到尾，这个 `lab` 有几个核心之处：\n\n1. `src/thread.rs`，这个文件内实现了 `thread` 的所有接口。我修改了 `wake_up, sleep, get_priority, set_priority` 这些函数。我们需要实现让线程能非阻塞 `sleep`，以及能够设置当前线程的优先级。\n2. `src/thread/manager.rs`，这个文件内实现了函数 `schedule`，可以说这是整个 `lab` 最为核心的函数：操作系统从 `ready` 列表中拿出优先级最高的线程，停止执行当前线程，切换上下文并移交执行权。\n3. `src/thread/imp.rs`，这个文件内是线程各项属性的定义，为了实现 task2 的第二部分我们需要对线程本身的结构体做出很多修改。\n4. 已经实现好的各种锁的代码。由于我们需要向线程切换以及唤醒线程中加入优先级的概念，因此所有涉及“唤醒等待线程”的地方都要考虑它们的优先级。\n\n最后说一说调试方法。我还是最喜欢直接 `kprintln`。可以在 `schedule` 函数、设置优先级这些地方输出当前线程的信息，非常方便。由于 `rust` 的 `release` 编译非常非常慢，因此要调试测试数据的时候可以先加入参数 `--dry` 显示调用的命令，然后在根目录下手动执行这个命令。这样可以快很多。\n\n比如，如果我想要调试测试点 `priority-preempt`，我就可以在 `tool` 文件夹里面输入命令 `cargo tt -c priority-preempt --dry`，它的输出是这样的\n\n\n{% asset_img image-20240324194932498.png This is an image %}\n\n在根目录下运行命令 `cargo run -r -F test-schedule -- -append priority-preempt` 就可以了。`-q` 参数可删可不删，我觉得看着编译信息有一种它正在工作的感觉。\n\n## Alarm Clock\n\n这个 `task` 的意思是需要让我们更改原有的 `sleep` 函数。这个函数默认的实现方式是每次被唤醒的时候就看看当前时刻有没有到目标时刻，如果没有到话就 `schedule`，让 `cpu` 执行其它线程。我们需要把它改为非阻塞的实现方式。\n\n实现方式也很简单，可以发现整个操作系统有一个增加当前时刻的函数 `tick`，我们只需要让这个函数每次被调用的时候都检查一下当前正在等待的线程。可以用 `BTreeMap<i64, Vec<Arc<Thread>>>` 将线程唤醒时间与线程本身关联起来，每 `tick` 都检查一下当前正在 `sleep` 的线程列表。\n\n## Priority Scheduling\n\n### Basic Priority Scheduling\n\n这里我们需要实现简单的线程优先级系统，为了确保我们对于优先级的理解正确，以下有几点共识：\n- 操作系统在**任意时刻**正在运行的线程都一定具有最高的优先级。不存在一个有着更高优先级的线程位于等待列表中。\n- 对于相同优先级的线程，在 `schedule` 中需要采用**先进先出**的策略：先被添加到 `ready` 列表中的线程应当被优先唤醒。\n- 在信号量中优先唤醒优先级高的线程。但是对于相同优先级的线程，它们被唤醒的顺序可以是随机的。\n\n为了让程序有更高的运行效率，你可能会想到用 `BinaryHeap` 实现取出优先级最高的线程，但是相信我，下一个任务你会把它改回 `Vec` 的（或者 `VecDeque`）\n\n推荐在写这个部分之前先认真思考一下这几个问题：\n1. 每个线程可能有哪些状态？\n1. 什么时候线程有可能会调用 `set_priority`？需不需要考虑那些正在被 `Blocked` 的线程？\n2. 什么时候最高优先级的线程会发生变化？\n\n你会需要修改 `src/thread/scheduler/fcfs.rs` 文件，可以照着里面已经有的那个东西实现一个优先队列版本的。\n\n值得一提的是我发现 `src/sync/sema.rs` 中对 `up` 函数的默认实现似乎有点问题：\n```rust src/sync/sema.rs\n/// V operation\npub fn up(&self) {\n    let old = sbi::interrupt::set(false);\n    let count = self.value.replace(self.value() + 1);\n\n    // Check if we need to wake up a sleeping waiter\n    if let Some(thread) = self.waiters.borrow_mut().pop_back() {\n        assert_eq!(count, 0);\n\n        thread::wake_up(thread.clone());\n    }\n\n    sbi::interrupt::set(old);\n}\n```\n\n这里实际上是不能 `assert` 的：唤醒线程并不代表立即运行这个线程，而 `count` 只有在请求锁的线程开始运行的时候才会 $-1$。因此如果执行权没有被交给被唤醒的线程，进行相邻的两次 `V` 后 `count` 确实可能非 $0$。所以这里的 `assert` 需要删去。\n\n### Priority Donation\n\n聪明的你在写完上一个关于优先级的任务之后也许会有这样的疑问：诶？这样的规则是不是非常容易导致死锁？文档中描述了这样一种情况：假设现在有高优先级线程 `H`，中优先级线程 `M` 以及低优先级线程 `L`，如果 `L` 持有一个锁，而 `M` 正在运行，那么 `L` 这个线程无论如何也不会被启动（因为 `M` 的优先级高于它，根据优先级策略 `M` 应该被优先执行），如果 `H` 需要 `L` 的锁，那么它就完蛋了。\n\n为了让这种情况不要发生，文档中提出了一种“线程捐赠”的机制：如果线程 `A` 要请求线程 `B` 的锁，它就会把自己的优先级“捐”给 `B`：`B` 此时的优先级应当变为 `A`，`B` 两者的较大值。我们将这个值称为“有效优先级”。如果 `B` 又开始请求线程 `C` 的锁，那么 `B` 就会把自己的有效优先级捐给 `C`，此时 `C` 的优先级就是 `A`，`B`，`C` 三者的最大值。\n\n你仔细思考了一下，发现很难在信号量这种多对多的场景实现这样的线程捐赠机制：你怎么知道当前线程在 `P` 完之后或者 `V` 完之后会不会继续管这个信号量？即使它不会管，也有许许多多其它的线程有可能会 `V`。那这种情况是谁捐给谁呢？\n\n答案是其实我们不需要管这种情况。只需要实现最简单的 `sleep` 内（不是第一个任务里面的那个 `sleep`）的优先级捐赠情况就行了，它相当于只能为 `0` 或者为 `1` 的信号量。`sleep` 内是一对多的（一个 `holder`，多个 `waiter`）。\n\n如果把线程捐赠的网络画成一张图，首先它一定是一个 `DAG`，再思考一下会发现它一定是一棵树：每个线程只可能等待另外一个线程，因为一旦 `require` 失败它就会 `Block` 直到这个锁被释放。因此我们需要实现的东西就是维护这么一棵捐赠的树形结构：可能会连一条新的边，也有可能断开原有的边，每个点的有效优先级是子树内的最大值。如果你非常厉害，那么不妨来试试 `lct` 吧。\n\n需要注意的是由于我们可能会请求一个正在 `sleep` 或者正在被阻塞的线程所持有的锁，所以那些没有运行的程序的优先级，乃至整条链上的优先级都可能会被改变，这也是上一个任务中不能使用 `BinaryHeap` 的原因：它是不支持修改的。\n\n另一件令人迷惑的问题是，我们需要在即使只有 `Arc<Thread>` 的情况下也能对此线程内的依赖关系进行修改，这就要求我们给那些可能被修改的数据套上互斥锁（`RefCell` 是不行的，因为它不 `Sync`，多线程访问的话 `rust` 会觉得不安全），这是相当奇怪的一件事：在上锁的过程中会涉及优先级捐赠，但实现优先级捐赠的部分却需要上锁。实际上在涉及到更改捐赠树的操作时我们会关闭 `interrupt`，因此可以确保访问的唯一性，但是为了通过编译仍然需要在相关的数据结构外套上一层 `Mutex`。\n\n最后聊一聊 `acquire` 和 `release` 内具体要干的事情。\n\n{% asset_img  image-20240324210533293.png 好图%}","source":"_posts/Tacos-lab1-directions.md","raw":"---\ntitle: Tacos lab1 directions\ndate: 2024-03-18 10:47:11\ntags: [Operating System]\ncategories: [Operating System]\n---\n\n## 一点碎碎念\n\n操作系统的 `lab` 相比于 ics 的 `lab` 难度明显上了一个档次，里面可能踩的坑实在是太多了！！而且对于新编写出的 `rust` 版本的操作系统，没有前人的足迹可以追寻，在写的时候也可能出现各种各样莫名其妙的问题。这篇文章权当一个小小的指北吧。我只会列出每个任务的设计思路。\n\n首先我想列出在写这个 `lab` 之前，我们应该达成的几点“共识”（要不然这 `lab` 没法写了）\n\n- 多线程中常用 `Mutex<>` 来确保对关键数据访问的独一性。它有一个优点是不需要 `Mutex` 本身可变就可以修改里面的数据，同时可以很安全地被多个线程访问。\n\n- `std` 是没法用的，但是 `rust` 很贴心地帮我们在 `alloc` 里面实现了很多有用的工具，比如 `Vec, BinaryHeap, BTreeMap` 等等。需要注意的是 `rust` 中没有与 `multiset` 类似的数据结构。 \n\n- 在这个 `lab` 中，我们只需要考虑单核 `cpu` 的情况。虽然整个系统看上去很多很多部分都是并行的，但实际上这些代码在某个时刻只会有一行正在被执行。\n\n- 这个 `lab` 的核心是维护不同线程的切换，线程的切换涉及以下几种情况：\n  1. 主动调用了 `schedule` 函数：将当前线程放回 `ready` 线程列表中，切换上下文，将执行权交给下一个线程。\n  2. 一个线程被唤醒了，且它比当前正在运行的线程具有更高的优先级。\n  3. 程序主动更改了一个线程的优先级（注意：这个线程一定是当前正在运行的线程！这个 `lab` 里面不需要实现更改其它线程的优先级），并且使得处于 `ready` 列表的线程中，存在一个线程的优先级更高。\n  4. 一个线程请求了一个未被释放的锁。\n  5. `time interrupt`。在内核中有一个计时器与一个切换阈值，如果距离上次切换的时间长于这个阈值，那么操作系统会触发一次 `time interrupt` 陷阱。如果不关闭 `time interrupt`，这个陷阱内会执行一次 `schedule`。因此如果要从系统层面上确保当前操作是原子的，需要关闭 `time interrupt`（关上这个之后甚至连 `tick` 都不会调用）。每个线程都有自己独立的 `time interrupt` 状态。在多核 `cpu` 上频繁地关 `interrupt` 不是一个好习惯，因为所有 `cpu` 都会停下，效率很低。不过我们只需要考虑单核的情况，因此该关还是关吧。\n  \n- 关于 `CondVar`：在使用互斥锁的场景下，如果我们手持一个锁，但同时又想要等待另外一个锁被释放，此时有两种想法：\n\n  - 不释放当前手持的锁，等待被释放的锁。好处是不会产生数据竞争，但是此时任何其他需要第一个锁的线程都会被阻塞，这样效率不高。\n  - 释放当前手持的锁，等待被释放的锁。这样做有一定风险：等待此线程持有的锁的那些线程有可能会在中间插入，从而导致数据竞争。\n\n  `CondVar` 就是专门针对这样的场景设计的工具，核心部分由三个函数组成：\n\n  1. `wait(cond, guard)` 这里 `cond` 是条件变量，`guard` 是锁，且必须处于持有状态。这个函数可以理解为“释放锁 `guard`，等待条件变量 `cond` 被触发，再重新获取锁 `guard`” 的原子过程，尽管其内部实现并不是原子的。\n  2. `notify_one(cond)` 通知一个等待这个条件变量触发的线程。如果没有线程在等待，那么这次触发将会被丢失。\n  3. `notify_all(cond)` 通知所有正在等待这个变量触发的线程。 \n\n<!-- more -->\n\n可以说从头到尾，这个 `lab` 有几个核心之处：\n\n1. `src/thread.rs`，这个文件内实现了 `thread` 的所有接口。我修改了 `wake_up, sleep, get_priority, set_priority` 这些函数。我们需要实现让线程能非阻塞 `sleep`，以及能够设置当前线程的优先级。\n2. `src/thread/manager.rs`，这个文件内实现了函数 `schedule`，可以说这是整个 `lab` 最为核心的函数：操作系统从 `ready` 列表中拿出优先级最高的线程，停止执行当前线程，切换上下文并移交执行权。\n3. `src/thread/imp.rs`，这个文件内是线程各项属性的定义，为了实现 task2 的第二部分我们需要对线程本身的结构体做出很多修改。\n4. 已经实现好的各种锁的代码。由于我们需要向线程切换以及唤醒线程中加入优先级的概念，因此所有涉及“唤醒等待线程”的地方都要考虑它们的优先级。\n\n最后说一说调试方法。我还是最喜欢直接 `kprintln`。可以在 `schedule` 函数、设置优先级这些地方输出当前线程的信息，非常方便。由于 `rust` 的 `release` 编译非常非常慢，因此要调试测试数据的时候可以先加入参数 `--dry` 显示调用的命令，然后在根目录下手动执行这个命令。这样可以快很多。\n\n比如，如果我想要调试测试点 `priority-preempt`，我就可以在 `tool` 文件夹里面输入命令 `cargo tt -c priority-preempt --dry`，它的输出是这样的\n\n\n{% asset_img image-20240324194932498.png This is an image %}\n\n在根目录下运行命令 `cargo run -r -F test-schedule -- -append priority-preempt` 就可以了。`-q` 参数可删可不删，我觉得看着编译信息有一种它正在工作的感觉。\n\n## Alarm Clock\n\n这个 `task` 的意思是需要让我们更改原有的 `sleep` 函数。这个函数默认的实现方式是每次被唤醒的时候就看看当前时刻有没有到目标时刻，如果没有到话就 `schedule`，让 `cpu` 执行其它线程。我们需要把它改为非阻塞的实现方式。\n\n实现方式也很简单，可以发现整个操作系统有一个增加当前时刻的函数 `tick`，我们只需要让这个函数每次被调用的时候都检查一下当前正在等待的线程。可以用 `BTreeMap<i64, Vec<Arc<Thread>>>` 将线程唤醒时间与线程本身关联起来，每 `tick` 都检查一下当前正在 `sleep` 的线程列表。\n\n## Priority Scheduling\n\n### Basic Priority Scheduling\n\n这里我们需要实现简单的线程优先级系统，为了确保我们对于优先级的理解正确，以下有几点共识：\n- 操作系统在**任意时刻**正在运行的线程都一定具有最高的优先级。不存在一个有着更高优先级的线程位于等待列表中。\n- 对于相同优先级的线程，在 `schedule` 中需要采用**先进先出**的策略：先被添加到 `ready` 列表中的线程应当被优先唤醒。\n- 在信号量中优先唤醒优先级高的线程。但是对于相同优先级的线程，它们被唤醒的顺序可以是随机的。\n\n为了让程序有更高的运行效率，你可能会想到用 `BinaryHeap` 实现取出优先级最高的线程，但是相信我，下一个任务你会把它改回 `Vec` 的（或者 `VecDeque`）\n\n推荐在写这个部分之前先认真思考一下这几个问题：\n1. 每个线程可能有哪些状态？\n1. 什么时候线程有可能会调用 `set_priority`？需不需要考虑那些正在被 `Blocked` 的线程？\n2. 什么时候最高优先级的线程会发生变化？\n\n你会需要修改 `src/thread/scheduler/fcfs.rs` 文件，可以照着里面已经有的那个东西实现一个优先队列版本的。\n\n值得一提的是我发现 `src/sync/sema.rs` 中对 `up` 函数的默认实现似乎有点问题：\n```rust src/sync/sema.rs\n/// V operation\npub fn up(&self) {\n    let old = sbi::interrupt::set(false);\n    let count = self.value.replace(self.value() + 1);\n\n    // Check if we need to wake up a sleeping waiter\n    if let Some(thread) = self.waiters.borrow_mut().pop_back() {\n        assert_eq!(count, 0);\n\n        thread::wake_up(thread.clone());\n    }\n\n    sbi::interrupt::set(old);\n}\n```\n\n这里实际上是不能 `assert` 的：唤醒线程并不代表立即运行这个线程，而 `count` 只有在请求锁的线程开始运行的时候才会 $-1$。因此如果执行权没有被交给被唤醒的线程，进行相邻的两次 `V` 后 `count` 确实可能非 $0$。所以这里的 `assert` 需要删去。\n\n### Priority Donation\n\n聪明的你在写完上一个关于优先级的任务之后也许会有这样的疑问：诶？这样的规则是不是非常容易导致死锁？文档中描述了这样一种情况：假设现在有高优先级线程 `H`，中优先级线程 `M` 以及低优先级线程 `L`，如果 `L` 持有一个锁，而 `M` 正在运行，那么 `L` 这个线程无论如何也不会被启动（因为 `M` 的优先级高于它，根据优先级策略 `M` 应该被优先执行），如果 `H` 需要 `L` 的锁，那么它就完蛋了。\n\n为了让这种情况不要发生，文档中提出了一种“线程捐赠”的机制：如果线程 `A` 要请求线程 `B` 的锁，它就会把自己的优先级“捐”给 `B`：`B` 此时的优先级应当变为 `A`，`B` 两者的较大值。我们将这个值称为“有效优先级”。如果 `B` 又开始请求线程 `C` 的锁，那么 `B` 就会把自己的有效优先级捐给 `C`，此时 `C` 的优先级就是 `A`，`B`，`C` 三者的最大值。\n\n你仔细思考了一下，发现很难在信号量这种多对多的场景实现这样的线程捐赠机制：你怎么知道当前线程在 `P` 完之后或者 `V` 完之后会不会继续管这个信号量？即使它不会管，也有许许多多其它的线程有可能会 `V`。那这种情况是谁捐给谁呢？\n\n答案是其实我们不需要管这种情况。只需要实现最简单的 `sleep` 内（不是第一个任务里面的那个 `sleep`）的优先级捐赠情况就行了，它相当于只能为 `0` 或者为 `1` 的信号量。`sleep` 内是一对多的（一个 `holder`，多个 `waiter`）。\n\n如果把线程捐赠的网络画成一张图，首先它一定是一个 `DAG`，再思考一下会发现它一定是一棵树：每个线程只可能等待另外一个线程，因为一旦 `require` 失败它就会 `Block` 直到这个锁被释放。因此我们需要实现的东西就是维护这么一棵捐赠的树形结构：可能会连一条新的边，也有可能断开原有的边，每个点的有效优先级是子树内的最大值。如果你非常厉害，那么不妨来试试 `lct` 吧。\n\n需要注意的是由于我们可能会请求一个正在 `sleep` 或者正在被阻塞的线程所持有的锁，所以那些没有运行的程序的优先级，乃至整条链上的优先级都可能会被改变，这也是上一个任务中不能使用 `BinaryHeap` 的原因：它是不支持修改的。\n\n另一件令人迷惑的问题是，我们需要在即使只有 `Arc<Thread>` 的情况下也能对此线程内的依赖关系进行修改，这就要求我们给那些可能被修改的数据套上互斥锁（`RefCell` 是不行的，因为它不 `Sync`，多线程访问的话 `rust` 会觉得不安全），这是相当奇怪的一件事：在上锁的过程中会涉及优先级捐赠，但实现优先级捐赠的部分却需要上锁。实际上在涉及到更改捐赠树的操作时我们会关闭 `interrupt`，因此可以确保访问的唯一性，但是为了通过编译仍然需要在相关的数据结构外套上一层 `Mutex`。\n\n最后聊一聊 `acquire` 和 `release` 内具体要干的事情。\n\n{% asset_img  image-20240324210533293.png 好图%}","slug":"Tacos-lab1-directions","published":1,"updated":"2024-03-24T13:09:41.466Z","comments":1,"layout":"post","photos":[],"_id":"clu5mp4rg000ewkfy1tmddy3p","content":"<h2 id=\"一点碎碎念\"><a href=\"#一点碎碎念\" class=\"headerlink\" title=\"一点碎碎念\"></a>一点碎碎念</h2><p>操作系统的 <code>lab</code> 相比于 ics 的 <code>lab</code> 难度明显上了一个档次，里面可能踩的坑实在是太多了！！而且对于新编写出的 <code>rust</code> 版本的操作系统，没有前人的足迹可以追寻，在写的时候也可能出现各种各样莫名其妙的问题。这篇文章权当一个小小的指北吧。我只会列出每个任务的设计思路。</p>\n<p>首先我想列出在写这个 <code>lab</code> 之前，我们应该达成的几点“共识”（要不然这 <code>lab</code> 没法写了）</p>\n<ul>\n<li><p>多线程中常用 <code>Mutex&lt;&gt;</code> 来确保对关键数据访问的独一性。它有一个优点是不需要 <code>Mutex</code> 本身可变就可以修改里面的数据，同时可以很安全地被多个线程访问。</p>\n</li>\n<li><p><code>std</code> 是没法用的，但是 <code>rust</code> 很贴心地帮我们在 <code>alloc</code> 里面实现了很多有用的工具，比如 <code>Vec, BinaryHeap, BTreeMap</code> 等等。需要注意的是 <code>rust</code> 中没有与 <code>multiset</code> 类似的数据结构。 </p>\n</li>\n<li><p>在这个 <code>lab</code> 中，我们只需要考虑单核 <code>cpu</code> 的情况。虽然整个系统看上去很多很多部分都是并行的，但实际上这些代码在某个时刻只会有一行正在被执行。</p>\n</li>\n<li><p>这个 <code>lab</code> 的核心是维护不同线程的切换，线程的切换涉及以下几种情况：</p>\n<ol>\n<li>主动调用了 <code>schedule</code> 函数：将当前线程放回 <code>ready</code> 线程列表中，切换上下文，将执行权交给下一个线程。</li>\n<li>一个线程被唤醒了，且它比当前正在运行的线程具有更高的优先级。</li>\n<li>程序主动更改了一个线程的优先级（注意：这个线程一定是当前正在运行的线程！这个 <code>lab</code> 里面不需要实现更改其它线程的优先级），并且使得处于 <code>ready</code> 列表的线程中，存在一个线程的优先级更高。</li>\n<li>一个线程请求了一个未被释放的锁。</li>\n<li><code>time interrupt</code>。在内核中有一个计时器与一个切换阈值，如果距离上次切换的时间长于这个阈值，那么操作系统会触发一次 <code>time interrupt</code> 陷阱。如果不关闭 <code>time interrupt</code>，这个陷阱内会执行一次 <code>schedule</code>。因此如果要从系统层面上确保当前操作是原子的，需要关闭 <code>time interrupt</code>（关上这个之后甚至连 <code>tick</code> 都不会调用）。每个线程都有自己独立的 <code>time interrupt</code> 状态。在多核 <code>cpu</code> 上频繁地关 <code>interrupt</code> 不是一个好习惯，因为所有 <code>cpu</code> 都会停下，效率很低。不过我们只需要考虑单核的情况，因此该关还是关吧。</li>\n</ol>\n</li>\n<li><p>关于 <code>CondVar</code>：在使用互斥锁的场景下，如果我们手持一个锁，但同时又想要等待另外一个锁被释放，此时有两种想法：</p>\n<ul>\n<li>不释放当前手持的锁，等待被释放的锁。好处是不会产生数据竞争，但是此时任何其他需要第一个锁的线程都会被阻塞，这样效率不高。</li>\n<li>释放当前手持的锁，等待被释放的锁。这样做有一定风险：等待此线程持有的锁的那些线程有可能会在中间插入，从而导致数据竞争。</li>\n</ul>\n<p><code>CondVar</code> 就是专门针对这样的场景设计的工具，核心部分由三个函数组成：</p>\n<ol>\n<li><code>wait(cond, guard)</code> 这里 <code>cond</code> 是条件变量，<code>guard</code> 是锁，且必须处于持有状态。这个函数可以理解为“释放锁 <code>guard</code>，等待条件变量 <code>cond</code> 被触发，再重新获取锁 <code>guard</code>” 的原子过程，尽管其内部实现并不是原子的。</li>\n<li><code>notify_one(cond)</code> 通知一个等待这个条件变量触发的线程。如果没有线程在等待，那么这次触发将会被丢失。</li>\n<li><code>notify_all(cond)</code> 通知所有正在等待这个变量触发的线程。</li>\n</ol>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>可以说从头到尾，这个 <code>lab</code> 有几个核心之处：</p>\n<ol>\n<li><code>src/thread.rs</code>，这个文件内实现了 <code>thread</code> 的所有接口。我修改了 <code>wake_up, sleep, get_priority, set_priority</code> 这些函数。我们需要实现让线程能非阻塞 <code>sleep</code>，以及能够设置当前线程的优先级。</li>\n<li><code>src/thread/manager.rs</code>，这个文件内实现了函数 <code>schedule</code>，可以说这是整个 <code>lab</code> 最为核心的函数：操作系统从 <code>ready</code> 列表中拿出优先级最高的线程，停止执行当前线程，切换上下文并移交执行权。</li>\n<li><code>src/thread/imp.rs</code>，这个文件内是线程各项属性的定义，为了实现 task2 的第二部分我们需要对线程本身的结构体做出很多修改。</li>\n<li>已经实现好的各种锁的代码。由于我们需要向线程切换以及唤醒线程中加入优先级的概念，因此所有涉及“唤醒等待线程”的地方都要考虑它们的优先级。</li>\n</ol>\n<p>最后说一说调试方法。我还是最喜欢直接 <code>kprintln</code>。可以在 <code>schedule</code> 函数、设置优先级这些地方输出当前线程的信息，非常方便。由于 <code>rust</code> 的 <code>release</code> 编译非常非常慢，因此要调试测试数据的时候可以先加入参数 <code>--dry</code> 显示调用的命令，然后在根目录下手动执行这个命令。这样可以快很多。</p>\n<p>比如，如果我想要调试测试点 <code>priority-preempt</code>，我就可以在 <code>tool</code> 文件夹里面输入命令 <code>cargo tt -c priority-preempt --dry</code>，它的输出是这样的</p>\n<img src=\"/2024/03/18/Tacos-lab1-directions/image-20240324194932498.png\" class=\"\" title=\"This is an image\">\n\n<p>在根目录下运行命令 <code>cargo run -r -F test-schedule -- -append priority-preempt</code> 就可以了。<code>-q</code> 参数可删可不删，我觉得看着编译信息有一种它正在工作的感觉。</p>\n<h2 id=\"Alarm-Clock\"><a href=\"#Alarm-Clock\" class=\"headerlink\" title=\"Alarm Clock\"></a>Alarm Clock</h2><p>这个 <code>task</code> 的意思是需要让我们更改原有的 <code>sleep</code> 函数。这个函数默认的实现方式是每次被唤醒的时候就看看当前时刻有没有到目标时刻，如果没有到话就 <code>schedule</code>，让 <code>cpu</code> 执行其它线程。我们需要把它改为非阻塞的实现方式。</p>\n<p>实现方式也很简单，可以发现整个操作系统有一个增加当前时刻的函数 <code>tick</code>，我们只需要让这个函数每次被调用的时候都检查一下当前正在等待的线程。可以用 <code>BTreeMap&lt;i64, Vec&lt;Arc&lt;Thread&gt;&gt;&gt;</code> 将线程唤醒时间与线程本身关联起来，每 <code>tick</code> 都检查一下当前正在 <code>sleep</code> 的线程列表。</p>\n<h2 id=\"Priority-Scheduling\"><a href=\"#Priority-Scheduling\" class=\"headerlink\" title=\"Priority Scheduling\"></a>Priority Scheduling</h2><h3 id=\"Basic-Priority-Scheduling\"><a href=\"#Basic-Priority-Scheduling\" class=\"headerlink\" title=\"Basic Priority Scheduling\"></a>Basic Priority Scheduling</h3><p>这里我们需要实现简单的线程优先级系统，为了确保我们对于优先级的理解正确，以下有几点共识：</p>\n<ul>\n<li>操作系统在<strong>任意时刻</strong>正在运行的线程都一定具有最高的优先级。不存在一个有着更高优先级的线程位于等待列表中。</li>\n<li>对于相同优先级的线程，在 <code>schedule</code> 中需要采用<strong>先进先出</strong>的策略：先被添加到 <code>ready</code> 列表中的线程应当被优先唤醒。</li>\n<li>在信号量中优先唤醒优先级高的线程。但是对于相同优先级的线程，它们被唤醒的顺序可以是随机的。</li>\n</ul>\n<p>为了让程序有更高的运行效率，你可能会想到用 <code>BinaryHeap</code> 实现取出优先级最高的线程，但是相信我，下一个任务你会把它改回 <code>Vec</code> 的（或者 <code>VecDeque</code>）</p>\n<p>推荐在写这个部分之前先认真思考一下这几个问题：</p>\n<ol>\n<li>每个线程可能有哪些状态？</li>\n<li>什么时候线程有可能会调用 <code>set_priority</code>？需不需要考虑那些正在被 <code>Blocked</code> 的线程？</li>\n<li>什么时候最高优先级的线程会发生变化？</li>\n</ol>\n<p>你会需要修改 <code>src/thread/scheduler/fcfs.rs</code> 文件，可以照着里面已经有的那个东西实现一个优先队列版本的。</p>\n<p>值得一提的是我发现 <code>src/sync/sema.rs</code> 中对 <code>up</code> 函数的默认实现似乎有点问题：</p>\n<figure class=\"highlight rust\"><figcaption><span>src/sync/sema.rs</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// V operation</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">up</span>(&amp;<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">old</span> = sbi::interrupt::<span class=\"title function_ invoke__\">set</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">count</span> = <span class=\"keyword\">self</span>.value.<span class=\"title function_ invoke__\">replace</span>(<span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">value</span>() + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if we need to wake up a sleeping waiter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(thread) = <span class=\"keyword\">self</span>.waiters.<span class=\"title function_ invoke__\">borrow_mut</span>().<span class=\"title function_ invoke__\">pop_back</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(count, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        thread::<span class=\"title function_ invoke__\">wake_up</span>(thread.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sbi::interrupt::<span class=\"title function_ invoke__\">set</span>(old);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里实际上是不能 <code>assert</code> 的：唤醒线程并不代表立即运行这个线程，而 <code>count</code> 只有在请求锁的线程开始运行的时候才会 $-1$。因此如果执行权没有被交给被唤醒的线程，进行相邻的两次 <code>V</code> 后 <code>count</code> 确实可能非 $0$。所以这里的 <code>assert</code> 需要删去。</p>\n<h3 id=\"Priority-Donation\"><a href=\"#Priority-Donation\" class=\"headerlink\" title=\"Priority Donation\"></a>Priority Donation</h3><p>聪明的你在写完上一个关于优先级的任务之后也许会有这样的疑问：诶？这样的规则是不是非常容易导致死锁？文档中描述了这样一种情况：假设现在有高优先级线程 <code>H</code>，中优先级线程 <code>M</code> 以及低优先级线程 <code>L</code>，如果 <code>L</code> 持有一个锁，而 <code>M</code> 正在运行，那么 <code>L</code> 这个线程无论如何也不会被启动（因为 <code>M</code> 的优先级高于它，根据优先级策略 <code>M</code> 应该被优先执行），如果 <code>H</code> 需要 <code>L</code> 的锁，那么它就完蛋了。</p>\n<p>为了让这种情况不要发生，文档中提出了一种“线程捐赠”的机制：如果线程 <code>A</code> 要请求线程 <code>B</code> 的锁，它就会把自己的优先级“捐”给 <code>B</code>：<code>B</code> 此时的优先级应当变为 <code>A</code>，<code>B</code> 两者的较大值。我们将这个值称为“有效优先级”。如果 <code>B</code> 又开始请求线程 <code>C</code> 的锁，那么 <code>B</code> 就会把自己的有效优先级捐给 <code>C</code>，此时 <code>C</code> 的优先级就是 <code>A</code>，<code>B</code>，<code>C</code> 三者的最大值。</p>\n<p>你仔细思考了一下，发现很难在信号量这种多对多的场景实现这样的线程捐赠机制：你怎么知道当前线程在 <code>P</code> 完之后或者 <code>V</code> 完之后会不会继续管这个信号量？即使它不会管，也有许许多多其它的线程有可能会 <code>V</code>。那这种情况是谁捐给谁呢？</p>\n<p>答案是其实我们不需要管这种情况。只需要实现最简单的 <code>sleep</code> 内（不是第一个任务里面的那个 <code>sleep</code>）的优先级捐赠情况就行了，它相当于只能为 <code>0</code> 或者为 <code>1</code> 的信号量。<code>sleep</code> 内是一对多的（一个 <code>holder</code>，多个 <code>waiter</code>）。</p>\n<p>如果把线程捐赠的网络画成一张图，首先它一定是一个 <code>DAG</code>，再思考一下会发现它一定是一棵树：每个线程只可能等待另外一个线程，因为一旦 <code>require</code> 失败它就会 <code>Block</code> 直到这个锁被释放。因此我们需要实现的东西就是维护这么一棵捐赠的树形结构：可能会连一条新的边，也有可能断开原有的边，每个点的有效优先级是子树内的最大值。如果你非常厉害，那么不妨来试试 <code>lct</code> 吧。</p>\n<p>需要注意的是由于我们可能会请求一个正在 <code>sleep</code> 或者正在被阻塞的线程所持有的锁，所以那些没有运行的程序的优先级，乃至整条链上的优先级都可能会被改变，这也是上一个任务中不能使用 <code>BinaryHeap</code> 的原因：它是不支持修改的。</p>\n<p>另一件令人迷惑的问题是，我们需要在即使只有 <code>Arc&lt;Thread&gt;</code> 的情况下也能对此线程内的依赖关系进行修改，这就要求我们给那些可能被修改的数据套上互斥锁（<code>RefCell</code> 是不行的，因为它不 <code>Sync</code>，多线程访问的话 <code>rust</code> 会觉得不安全），这是相当奇怪的一件事：在上锁的过程中会涉及优先级捐赠，但实现优先级捐赠的部分却需要上锁。实际上在涉及到更改捐赠树的操作时我们会关闭 <code>interrupt</code>，因此可以确保访问的唯一性，但是为了通过编译仍然需要在相关的数据结构外套上一层 <code>Mutex</code>。</p>\n<p>最后聊一聊 <code>acquire</code> 和 <code>release</code> 内具体要干的事情。</p>\n<img src=\"/2024/03/18/Tacos-lab1-directions/image-20240324210533293.png\" class=\"\" title=\"好图\">","excerpt":"<h2 id=\"一点碎碎念\"><a href=\"#一点碎碎念\" class=\"headerlink\" title=\"一点碎碎念\"></a>一点碎碎念</h2><p>操作系统的 <code>lab</code> 相比于 ics 的 <code>lab</code> 难度明显上了一个档次，里面可能踩的坑实在是太多了！！而且对于新编写出的 <code>rust</code> 版本的操作系统，没有前人的足迹可以追寻，在写的时候也可能出现各种各样莫名其妙的问题。这篇文章权当一个小小的指北吧。我只会列出每个任务的设计思路。</p>\n<p>首先我想列出在写这个 <code>lab</code> 之前，我们应该达成的几点“共识”（要不然这 <code>lab</code> 没法写了）</p>\n<ul>\n<li><p>多线程中常用 <code>Mutex&lt;&gt;</code> 来确保对关键数据访问的独一性。它有一个优点是不需要 <code>Mutex</code> 本身可变就可以修改里面的数据，同时可以很安全地被多个线程访问。</p>\n</li>\n<li><p><code>std</code> 是没法用的，但是 <code>rust</code> 很贴心地帮我们在 <code>alloc</code> 里面实现了很多有用的工具，比如 <code>Vec, BinaryHeap, BTreeMap</code> 等等。需要注意的是 <code>rust</code> 中没有与 <code>multiset</code> 类似的数据结构。 </p>\n</li>\n<li><p>在这个 <code>lab</code> 中，我们只需要考虑单核 <code>cpu</code> 的情况。虽然整个系统看上去很多很多部分都是并行的，但实际上这些代码在某个时刻只会有一行正在被执行。</p>\n</li>\n<li><p>这个 <code>lab</code> 的核心是维护不同线程的切换，线程的切换涉及以下几种情况：</p>\n<ol>\n<li>主动调用了 <code>schedule</code> 函数：将当前线程放回 <code>ready</code> 线程列表中，切换上下文，将执行权交给下一个线程。</li>\n<li>一个线程被唤醒了，且它比当前正在运行的线程具有更高的优先级。</li>\n<li>程序主动更改了一个线程的优先级（注意：这个线程一定是当前正在运行的线程！这个 <code>lab</code> 里面不需要实现更改其它线程的优先级），并且使得处于 <code>ready</code> 列表的线程中，存在一个线程的优先级更高。</li>\n<li>一个线程请求了一个未被释放的锁。</li>\n<li><code>time interrupt</code>。在内核中有一个计时器与一个切换阈值，如果距离上次切换的时间长于这个阈值，那么操作系统会触发一次 <code>time interrupt</code> 陷阱。如果不关闭 <code>time interrupt</code>，这个陷阱内会执行一次 <code>schedule</code>。因此如果要从系统层面上确保当前操作是原子的，需要关闭 <code>time interrupt</code>（关上这个之后甚至连 <code>tick</code> 都不会调用）。每个线程都有自己独立的 <code>time interrupt</code> 状态。在多核 <code>cpu</code> 上频繁地关 <code>interrupt</code> 不是一个好习惯，因为所有 <code>cpu</code> 都会停下，效率很低。不过我们只需要考虑单核的情况，因此该关还是关吧。</li>\n</ol>\n</li>\n<li><p>关于 <code>CondVar</code>：在使用互斥锁的场景下，如果我们手持一个锁，但同时又想要等待另外一个锁被释放，此时有两种想法：</p>\n<ul>\n<li>不释放当前手持的锁，等待被释放的锁。好处是不会产生数据竞争，但是此时任何其他需要第一个锁的线程都会被阻塞，这样效率不高。</li>\n<li>释放当前手持的锁，等待被释放的锁。这样做有一定风险：等待此线程持有的锁的那些线程有可能会在中间插入，从而导致数据竞争。</li>\n</ul>\n<p><code>CondVar</code> 就是专门针对这样的场景设计的工具，核心部分由三个函数组成：</p>\n<ol>\n<li><code>wait(cond, guard)</code> 这里 <code>cond</code> 是条件变量，<code>guard</code> 是锁，且必须处于持有状态。这个函数可以理解为“释放锁 <code>guard</code>，等待条件变量 <code>cond</code> 被触发，再重新获取锁 <code>guard</code>” 的原子过程，尽管其内部实现并不是原子的。</li>\n<li><code>notify_one(cond)</code> 通知一个等待这个条件变量触发的线程。如果没有线程在等待，那么这次触发将会被丢失。</li>\n<li><code>notify_all(cond)</code> 通知所有正在等待这个变量触发的线程。</li>\n</ol>\n</li>\n</ul>","more":"<p>可以说从头到尾，这个 <code>lab</code> 有几个核心之处：</p>\n<ol>\n<li><code>src/thread.rs</code>，这个文件内实现了 <code>thread</code> 的所有接口。我修改了 <code>wake_up, sleep, get_priority, set_priority</code> 这些函数。我们需要实现让线程能非阻塞 <code>sleep</code>，以及能够设置当前线程的优先级。</li>\n<li><code>src/thread/manager.rs</code>，这个文件内实现了函数 <code>schedule</code>，可以说这是整个 <code>lab</code> 最为核心的函数：操作系统从 <code>ready</code> 列表中拿出优先级最高的线程，停止执行当前线程，切换上下文并移交执行权。</li>\n<li><code>src/thread/imp.rs</code>，这个文件内是线程各项属性的定义，为了实现 task2 的第二部分我们需要对线程本身的结构体做出很多修改。</li>\n<li>已经实现好的各种锁的代码。由于我们需要向线程切换以及唤醒线程中加入优先级的概念，因此所有涉及“唤醒等待线程”的地方都要考虑它们的优先级。</li>\n</ol>\n<p>最后说一说调试方法。我还是最喜欢直接 <code>kprintln</code>。可以在 <code>schedule</code> 函数、设置优先级这些地方输出当前线程的信息，非常方便。由于 <code>rust</code> 的 <code>release</code> 编译非常非常慢，因此要调试测试数据的时候可以先加入参数 <code>--dry</code> 显示调用的命令，然后在根目录下手动执行这个命令。这样可以快很多。</p>\n<p>比如，如果我想要调试测试点 <code>priority-preempt</code>，我就可以在 <code>tool</code> 文件夹里面输入命令 <code>cargo tt -c priority-preempt --dry</code>，它的输出是这样的</p>\n<img src=\"/2024/03/18/Tacos-lab1-directions/image-20240324194932498.png\" class=\"\" title=\"This is an image\">\n\n<p>在根目录下运行命令 <code>cargo run -r -F test-schedule -- -append priority-preempt</code> 就可以了。<code>-q</code> 参数可删可不删，我觉得看着编译信息有一种它正在工作的感觉。</p>\n<h2 id=\"Alarm-Clock\"><a href=\"#Alarm-Clock\" class=\"headerlink\" title=\"Alarm Clock\"></a>Alarm Clock</h2><p>这个 <code>task</code> 的意思是需要让我们更改原有的 <code>sleep</code> 函数。这个函数默认的实现方式是每次被唤醒的时候就看看当前时刻有没有到目标时刻，如果没有到话就 <code>schedule</code>，让 <code>cpu</code> 执行其它线程。我们需要把它改为非阻塞的实现方式。</p>\n<p>实现方式也很简单，可以发现整个操作系统有一个增加当前时刻的函数 <code>tick</code>，我们只需要让这个函数每次被调用的时候都检查一下当前正在等待的线程。可以用 <code>BTreeMap&lt;i64, Vec&lt;Arc&lt;Thread&gt;&gt;&gt;</code> 将线程唤醒时间与线程本身关联起来，每 <code>tick</code> 都检查一下当前正在 <code>sleep</code> 的线程列表。</p>\n<h2 id=\"Priority-Scheduling\"><a href=\"#Priority-Scheduling\" class=\"headerlink\" title=\"Priority Scheduling\"></a>Priority Scheduling</h2><h3 id=\"Basic-Priority-Scheduling\"><a href=\"#Basic-Priority-Scheduling\" class=\"headerlink\" title=\"Basic Priority Scheduling\"></a>Basic Priority Scheduling</h3><p>这里我们需要实现简单的线程优先级系统，为了确保我们对于优先级的理解正确，以下有几点共识：</p>\n<ul>\n<li>操作系统在<strong>任意时刻</strong>正在运行的线程都一定具有最高的优先级。不存在一个有着更高优先级的线程位于等待列表中。</li>\n<li>对于相同优先级的线程，在 <code>schedule</code> 中需要采用<strong>先进先出</strong>的策略：先被添加到 <code>ready</code> 列表中的线程应当被优先唤醒。</li>\n<li>在信号量中优先唤醒优先级高的线程。但是对于相同优先级的线程，它们被唤醒的顺序可以是随机的。</li>\n</ul>\n<p>为了让程序有更高的运行效率，你可能会想到用 <code>BinaryHeap</code> 实现取出优先级最高的线程，但是相信我，下一个任务你会把它改回 <code>Vec</code> 的（或者 <code>VecDeque</code>）</p>\n<p>推荐在写这个部分之前先认真思考一下这几个问题：</p>\n<ol>\n<li>每个线程可能有哪些状态？</li>\n<li>什么时候线程有可能会调用 <code>set_priority</code>？需不需要考虑那些正在被 <code>Blocked</code> 的线程？</li>\n<li>什么时候最高优先级的线程会发生变化？</li>\n</ol>\n<p>你会需要修改 <code>src/thread/scheduler/fcfs.rs</code> 文件，可以照着里面已经有的那个东西实现一个优先队列版本的。</p>\n<p>值得一提的是我发现 <code>src/sync/sema.rs</code> 中对 <code>up</code> 函数的默认实现似乎有点问题：</p>\n<figure class=\"highlight rust\"><figcaption><span>src/sync/sema.rs</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// V operation</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">up</span>(&amp;<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">old</span> = sbi::interrupt::<span class=\"title function_ invoke__\">set</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">count</span> = <span class=\"keyword\">self</span>.value.<span class=\"title function_ invoke__\">replace</span>(<span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">value</span>() + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if we need to wake up a sleeping waiter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(thread) = <span class=\"keyword\">self</span>.waiters.<span class=\"title function_ invoke__\">borrow_mut</span>().<span class=\"title function_ invoke__\">pop_back</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(count, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        thread::<span class=\"title function_ invoke__\">wake_up</span>(thread.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sbi::interrupt::<span class=\"title function_ invoke__\">set</span>(old);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里实际上是不能 <code>assert</code> 的：唤醒线程并不代表立即运行这个线程，而 <code>count</code> 只有在请求锁的线程开始运行的时候才会 $-1$。因此如果执行权没有被交给被唤醒的线程，进行相邻的两次 <code>V</code> 后 <code>count</code> 确实可能非 $0$。所以这里的 <code>assert</code> 需要删去。</p>\n<h3 id=\"Priority-Donation\"><a href=\"#Priority-Donation\" class=\"headerlink\" title=\"Priority Donation\"></a>Priority Donation</h3><p>聪明的你在写完上一个关于优先级的任务之后也许会有这样的疑问：诶？这样的规则是不是非常容易导致死锁？文档中描述了这样一种情况：假设现在有高优先级线程 <code>H</code>，中优先级线程 <code>M</code> 以及低优先级线程 <code>L</code>，如果 <code>L</code> 持有一个锁，而 <code>M</code> 正在运行，那么 <code>L</code> 这个线程无论如何也不会被启动（因为 <code>M</code> 的优先级高于它，根据优先级策略 <code>M</code> 应该被优先执行），如果 <code>H</code> 需要 <code>L</code> 的锁，那么它就完蛋了。</p>\n<p>为了让这种情况不要发生，文档中提出了一种“线程捐赠”的机制：如果线程 <code>A</code> 要请求线程 <code>B</code> 的锁，它就会把自己的优先级“捐”给 <code>B</code>：<code>B</code> 此时的优先级应当变为 <code>A</code>，<code>B</code> 两者的较大值。我们将这个值称为“有效优先级”。如果 <code>B</code> 又开始请求线程 <code>C</code> 的锁，那么 <code>B</code> 就会把自己的有效优先级捐给 <code>C</code>，此时 <code>C</code> 的优先级就是 <code>A</code>，<code>B</code>，<code>C</code> 三者的最大值。</p>\n<p>你仔细思考了一下，发现很难在信号量这种多对多的场景实现这样的线程捐赠机制：你怎么知道当前线程在 <code>P</code> 完之后或者 <code>V</code> 完之后会不会继续管这个信号量？即使它不会管，也有许许多多其它的线程有可能会 <code>V</code>。那这种情况是谁捐给谁呢？</p>\n<p>答案是其实我们不需要管这种情况。只需要实现最简单的 <code>sleep</code> 内（不是第一个任务里面的那个 <code>sleep</code>）的优先级捐赠情况就行了，它相当于只能为 <code>0</code> 或者为 <code>1</code> 的信号量。<code>sleep</code> 内是一对多的（一个 <code>holder</code>，多个 <code>waiter</code>）。</p>\n<p>如果把线程捐赠的网络画成一张图，首先它一定是一个 <code>DAG</code>，再思考一下会发现它一定是一棵树：每个线程只可能等待另外一个线程，因为一旦 <code>require</code> 失败它就会 <code>Block</code> 直到这个锁被释放。因此我们需要实现的东西就是维护这么一棵捐赠的树形结构：可能会连一条新的边，也有可能断开原有的边，每个点的有效优先级是子树内的最大值。如果你非常厉害，那么不妨来试试 <code>lct</code> 吧。</p>\n<p>需要注意的是由于我们可能会请求一个正在 <code>sleep</code> 或者正在被阻塞的线程所持有的锁，所以那些没有运行的程序的优先级，乃至整条链上的优先级都可能会被改变，这也是上一个任务中不能使用 <code>BinaryHeap</code> 的原因：它是不支持修改的。</p>\n<p>另一件令人迷惑的问题是，我们需要在即使只有 <code>Arc&lt;Thread&gt;</code> 的情况下也能对此线程内的依赖关系进行修改，这就要求我们给那些可能被修改的数据套上互斥锁（<code>RefCell</code> 是不行的，因为它不 <code>Sync</code>，多线程访问的话 <code>rust</code> 会觉得不安全），这是相当奇怪的一件事：在上锁的过程中会涉及优先级捐赠，但实现优先级捐赠的部分却需要上锁。实际上在涉及到更改捐赠树的操作时我们会关闭 <code>interrupt</code>，因此可以确保访问的唯一性，但是为了通过编译仍然需要在相关的数据结构外套上一层 <code>Mutex</code>。</p>\n<p>最后聊一聊 <code>acquire</code> 和 <code>release</code> 内具体要干的事情。</p>\n<img src=\"/2024/03/18/Tacos-lab1-directions/image-20240324210533293.png\" class=\"\" title=\"好图\">"}],"PostAsset":[{"_id":"source/_posts/Tacos-lab1-directions/image-20240324194932498.png","slug":"image-20240324194932498.png","post":"clu5mp4rg000ewkfy1tmddy3p","modified":0,"renderable":0},{"_id":"source/_posts/Tacos-lab1-directions/image-20240324210533293.png","slug":"image-20240324210533293.png","post":"clu5mp4rg000ewkfy1tmddy3p","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clu5mp4re0003wkfy2qd1aupb","category_id":"clu5mp4rf0007wkfy7q68a1rq","_id":"clu5mp4rf000bwkfyekz2eqf8"},{"post_id":"clu5mp4rd0002wkfy3l8tclix","category_id":"clu5mp4rf0005wkfye6l11stf","_id":"clu5mp4rf000cwkfycebd0hve"},{"post_id":"clu5mp4rd0002wkfy3l8tclix","category_id":"clu5mp4rf0008wkfyg4sehhri","_id":"clu5mp4rf000dwkfy7w4mgfp8"},{"post_id":"clu5mp4rg000ewkfy1tmddy3p","category_id":"clu5mp4rg000fwkfyd032e7d5","_id":"clu5mp4rg000iwkfy8281eue1"}],"PostTag":[{"post_id":"clu5mp4rd0002wkfy3l8tclix","tag_id":"clu5mp4re0004wkfy674a1y6i","_id":"clu5mp4rf0009wkfyhm39e6ng"},{"post_id":"clu5mp4rd0002wkfy3l8tclix","tag_id":"clu5mp4rf0006wkfybbzrezcl","_id":"clu5mp4rf000awkfy9dkr1tmc"},{"post_id":"clu5mp4rg000ewkfy1tmddy3p","tag_id":"clu5mp4rg000gwkfyab1ha0aq","_id":"clu5mp4rg000hwkfyhkvv3p3n"}],"Tag":[{"name":"Automata","_id":"clu5mp4re0004wkfy674a1y6i"},{"name":"Theoretical Computer Science (TCS)","_id":"clu5mp4rf0006wkfybbzrezcl"},{"name":"Operating System","_id":"clu5mp4rg000gwkfyab1ha0aq"}]}}